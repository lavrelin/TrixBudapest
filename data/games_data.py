from datetime import datetime
from typing import Dict, Any
import random

# –°–∏—Å—Ç–µ–º–∞ –∏–≥—Ä—ã "–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ" - –û–î–ù–ê –í–ï–†–°–ò–Ø
word_games: Dict[str, Dict[str, Any]] = {
    'try': {
        'words': {}, 
        'current_word': None, 
        'active': False, 
        'winners': [], 
        'interval': 60,
        'description': '–ö–æ–Ω–∫—É—Ä—Å –ø–æ–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω',
        'media_url': None
    }
}

# –°–∏—Å—Ç–µ–º–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –Ω–æ–º–µ—Ä–æ–≤ - –û–î–ù–ê –í–ï–†–°–ò–Ø
roll_games: Dict[str, Dict[str, Any]] = {
    'try': {'participants': {}, 'active': True}
}

# –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_attempts: Dict[int, Dict[str, datetime]] = {}

def get_game_version(command: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–µ—Ä—Å–∏—é –∏–≥—Ä—ã –ø–æ –∫–æ–º–∞–Ω–¥–µ - –í–°–ï–ì–î–ê –í–û–ó–í–†–ê–©–ê–ï–¢ 'try'"""
    return 'try'

def can_attempt(user_id: int, game_version: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    if user_id not in user_attempts:
        return True
    if game_version not in user_attempts[user_id]:
        return True
    
    from datetime import timedelta
    last_attempt = user_attempts[user_id][game_version]
    interval_minutes = word_games[game_version]['interval']
    return datetime.now() - last_attempt >= timedelta(minutes=interval_minutes)

def record_attempt(user_id: int, game_version: str):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ø—ã—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_attempts:
        user_attempts[user_id] = {}
    user_attempts[user_id][game_version] = datetime.now()

def normalize_word(word: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Å–ª–æ–≤–æ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    return word.lower().strip().replace('—ë', '–µ')

def start_word_game(game_version: str) -> bool:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É –≤ —Å–ª–æ–≤–∞"""
    if not word_games[game_version]['words']:
        return False
    
    current_word = random.choice(list(word_games[game_version]['words'].keys()))
    word_games[game_version]['current_word'] = current_word
    word_games[game_version]['active'] = True
    word_games[game_version]['winners'] = []
    word_games[game_version]['description'] = f"üéÆ –ö–æ–Ω–∫—É—Ä—Å –∞–∫—Ç–∏–≤–µ–Ω! –£–≥–∞–¥–∞–π—Ç–µ —Å–ª–æ–≤–æ –∏—Å–ø–æ–ª—å–∑—É—è /slovo"
    return True

def stop_word_game(game_version: str):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–≥—Ä—É –≤ —Å–ª–æ–≤–∞"""
    word_games[game_version]['active'] = False
    current_word = word_games[game_version]['current_word']
    winners = word_games[game_version]['winners']
    
    if winners:
        winner_list = ", ".join([f"@{winner}" for winner in winners])
        word_games[game_version]['description'] = f"üèÜ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–Ω–∫—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏: {winner_list}. –°–ª–æ–≤–æ –±—ã–ª–æ: {current_word}"
    else:
        word_games[game_version]['description'] = f"–ö–æ–Ω–∫—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ª–æ–≤–æ –±—ã–ª–æ: {current_word or '–Ω–µ –≤—ã–±—Ä–∞–Ω–æ'}"

def add_winner(game_version: str, username: str):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è"""
    word_games[game_version]['winners'].append(username)
    word_games[game_version]['active'] = False
    current_word = word_games[game_version]['current_word']
    word_games[game_version]['description'] = f"üèÜ @{username} —É–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ '{current_word}' –∏ —Å—Ç–∞–ª –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º! –û–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∫–æ–Ω–∫—É—Ä—Å."

def get_unique_roll_number(game_version: str) -> int:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
    existing_numbers = set(data['number'] for data in roll_games[game_version]['participants'].values())
    
    for _ in range(100):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏
        new_number = random.randint(1, 9999)
        if new_number not in existing_numbers:
            return new_number
    return random.randint(1, 9999)  # Fallback
