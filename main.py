#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
import asyncio
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, 
    MessageHandler, filters
)
from dotenv import load_dotenv
from config import Config

# Import handlers
from handlers.start_handler import (
    start_command, help_command, handle_start_menu_callback, handle_links_callback
)
from handlers.basic_handler import (
    id_command, whois_command, join_command, participants_command, report_command
)
from handlers.link_handler import (
    trixlinks_command, trixlinksadd_command, trixlinksedit_command, trixlinksdelete_command
)
from handlers.moderation_commands import (
    ban_command, unban_command, mute_command, unmute_command, 
    banlist_command, stats_command, top_command, lastseen_command
)
from handlers.advanced_moderation import (
    del_command, purge_command, slowmode_command, noslowmode_command,
    lockdown_command, antiinvite_command, tagall_command,# üì¶ –ü–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

## 1. handlers/start_handler.py
```python
# -*- coding: utf-8 -*-
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler
from config import Config
import logging

logger = logging.getLogger(__name__)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ë–î
    try:
        logger.info(f"User started bot: {user.username or user.id}")
    except Exception as e:
        logger.warning(f"Could not process user data: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –ª–∏—á–∫–µ
    if update.effective_chat.type != 'private':
        await update.message.reply_text(
            "üì± –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –ª–∏—á–∫—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π: @TrixLiveBot"
        )
        return
    
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úçÔ∏è –ü–∏—Å–∞—Ç—å", callback_data="start_menu:write"),
            InlineKeyboardButton("üìñ –ß–∏—Ç–∞—Ç—å", callback_data="start_menu:read")
        ],
        [
            InlineKeyboardButton("üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏", callback_data="start_menu:links"),
            InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="start_menu:profile")
        ]
    ])
    
    welcome_text = f"""üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name or '–¥—Ä—É–≥'}!

ü§ñ –Ø TrixBot - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –ë—É–¥–∞–ø–µ—à—Ç–∞

üìã **–ß—Ç–æ —è —É–º–µ—é:**
- –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
- –î–æ–±–∞–≤–ª—è—Ç—å —É—Å–ª—É–≥–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥
- –ü—Ä–æ–≤–æ–¥–∏—Ç—å –∏–≥—Ä—ã –∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏
- –ü–æ–º–æ–≥–∞—Ç—å —Å –ø–æ–ª–µ–∑–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏

üéÆ **–ò–≥—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
- `/trygame` - –∏–≥—Ä—ã –≤–µ—Ä—Å–∏–∏ TRY  
- `/needgame` - –∏–≥—Ä—ã –≤–µ—Ä—Å–∏–∏ NEED
- `/moregame` - –∏–≥—Ä—ã –≤–µ—Ä—Å–∏–∏ MORE

üîó **–ü–æ–ª–µ–∑–Ω–æ–µ:**
- `/trixlinks` - –≤—Å–µ —Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
- `/help` - –ø–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–º–æ—â—å"""

    await update.message.reply_text(welcome_text, reply_markup=keyboard)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = """üÜò **–ü–û–ú–û–©–¨ –ü–û –ë–û–¢–£**

**üìù –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
- `/start` - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
- `/help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
- `/id` - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à ID
- `/trixlinks` - –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏

**üéÆ –ò–≥—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã (try/need/more):**
- `/tryadd` - –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ (–∞–¥–º–∏–Ω)
- `/trystart` - –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—É—Ä—Å (–∞–¥–º–∏–Ω) 
- `/tryslovo –æ—Ç–≤–µ—Ç` - —É–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ
- `/tryroll` - –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä –≤ —Ä–æ–∑—ã–≥—Ä—ã—à
- `/trypage` - —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–≥—Ä—ã
- `/trygame` - —Å–ø—Ä–∞–≤–∫–∞ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤
- `/tryguide` - —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤

**üîó –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∞–º–∏:**
- `/trixlinks` - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏
- `/trixlinksadd` - –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É (–∞–¥–º–∏–Ω)
- `/trixlinksedit` - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–∞–¥–º–∏–Ω)

**üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü–∏—è (–∞–¥–º–∏–Ω):**
- `/ban @user` - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
- `/mute @user 60m` - –∑–∞–º—É—Ç–∏—Ç—å
- `/stats` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
- `/autopost` - –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥

**üì± –í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º!**"""
    
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úçÔ∏è –ü–∏—Å–∞—Ç—å", callback_data="start_menu:write"),
            InlineKeyboardButton("üìñ –ß–∏—Ç–∞—Ç—å", callback_data="start_menu:read")
        ],
        [
            InlineKeyboardButton("üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏", callback_data="start_menu:links"),
            InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="start_menu:profile")
        ]
    ])
    
    await update.callback_query.edit_message_text(
        "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

async def show_write_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞–ø–∏—Å–∞–Ω–∏—è"""
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üì¢ –ü—É–±–ª–∏–∫–∞—Ü–∏—è", callback_data="pub:start"),
            InlineKeyboardButton("üóÇÔ∏è –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥", callback_data="piar:start")
        ],
        [
            InlineKeyboardButton("‚ö° –ê–∫—Ç—É–∞–ª—å–Ω–æ–µ", callback_data="actual:start"),
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start_menu:back")
        ]
    ])
    
    await update.callback_query.edit_message_text(
        "‚úçÔ∏è **–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å?**\n\n"
        "üì¢ **–ü—É–±–ª–∏–∫–∞—Ü–∏—è** - –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª\n"
        "üóÇÔ∏è **–ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥** - –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏ —É—Å–ª—É–≥–∏\n"
        "‚ö° **–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ** - —Å—Ä–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

async def show_links_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å—Å—ã–ª–æ–∫"""
    from data.links_data import trix_links
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏", callback_data="links:show_all")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start_menu:back")]
    ])
    
    await update.callback_query.edit_message_text(
        f"üîó **–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏**\n\n"
        f"üìä –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: {len(trix_links)}\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

async def show_profile_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.callback_query.from_user
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start_menu:back")]
    ])
    
    profile_text = f"""üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**

üÜî **ID:** {user.id}
üë§ **–ò–º—è:** {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìß **Username:** @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìÖ **–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {user.id} 

üéÆ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä:** –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
üèÜ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:** –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"""
    
    await update.callback_query.edit_message_text(
        profile_text,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –º–µ–Ω—é
async def handle_start_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    data = query.data.split(":")[1]
    
    try:
        if data == "write":
            await show_write_menu(update, context)
        elif data == "read":
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start_menu:back")]
            ])
            await query.edit_message_text(
                "üìñ **–†–∞–∑–¥–µ–ª —á—Ç–µ–Ω–∏—è**\n\n–ó–¥–µ—Å—å –±—É–¥—É—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n\nüöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
        elif data == "links":
            await show_links_menu(update, context)
        elif data == "profile":
            await show_profile_menu(update, context)
        elif data == "back":
            await show_main_menu(update, context)
    except Exception as e:
        logger.error(f"Error in start menu callback: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫
async def handle_links_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å—Å—ã–ª–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    data = query.data.split(":")[1]
    
    if data == "show_all":
        from handlers.link_handler import trixlinks_command
        # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        class FakeMessage:
            def __init__(self, query):
                self.query = query
            
            async def reply_text(self, text, **kwargs):
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ö —Å—Å—ã–ª–∫–∞–º", callback_data="start_menu:links")]
                ])
                await query.edit_message_text(text, reply_markup=keyboard, **kwargs)
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–µ–Ω—è–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        update.message = FakeMessage(query)
        await trixlinks_command(update, context)
