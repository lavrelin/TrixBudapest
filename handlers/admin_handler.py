from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import Config
from services.db import db
from models import User
from sqlalchemy import select
from utils.decorators import admin_only_with_delete
import logging

logger = logging.getLogger(__name__)

@admin_only_with_delete
async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /admin command"""
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin:stats")],
        [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin:broadcast")],
        [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="admin:manage")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:back")]
    ]
    
    text = (
        "üîß *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∏–∑ –≥—Ä—É–ø–ø—ã - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –õ–°
    if update.effective_chat.type in ['group', 'supergroup']:
        try:
            await context.bot.send_message(
                chat_id=update.effective_user.id,
                text=text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"Cannot send admin panel to PM: {e}")
    else:
        await update.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

async def handle_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle admin callbacks"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    
    if not Config.is_admin(user_id):
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    data = query.data.split(":")
    action = data[1] if len(data) > 1 else None
    
    logger.info(f"Admin callback: {action} from user {user_id}")
    
    if action == "stats":
        await show_admin_stats(update, context)
    elif action == "broadcast":
        await show_broadcast_menu(update, context)
    elif action == "manage":
        await show_manage_menu(update, context)
    elif action == "back":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin:stats")],
            [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin:broadcast")],
            [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="admin:manage")],
            [InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:back")]
        ]
        
        try:
            await query.edit_message_text(
                "üîß *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"Error editing admin menu: {e}")
            await query.message.reply_text(
                "üîß *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
    else:
        await query.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

async def show_admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    query = update.callback_query
    
    try:
        from data.user_data import user_data
        from datetime import datetime, timedelta
        
        total_users = len(user_data)
        active_users = sum(1 for data in user_data.values() if 
                          datetime.now() - data['last_activity'] <= timedelta(days=1))
        total_messages = sum(data['message_count'] for data in user_data.values())
        banned_count = sum(1 for data in user_data.values() if data.get('banned'))
        
        stats_text = (
            f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ —Å—É—Ç–∫–∏: {active_users}\n"
            f"üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n"
            f"üö´ –ó–∞–±–∞–Ω–µ–Ω–æ: {banned_count}\n"
            f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:back")]]
        
        await query.edit_message_text(
            stats_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error showing stats: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

async def show_broadcast_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏"""
    query = update.callback_query
    
    text = (
        "üì¢ *–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π*\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "`/broadcast —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è`\n\n"
        "–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞."
    )
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:back")]]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def show_manage_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    query = update.callback_query
    
    text = (
        "üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏*\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ `/ban @user –ø—Ä–∏—á–∏–Ω–∞` - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å\n"
        "‚Ä¢ `/unban @user` - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å\n"
        "‚Ä¢ `/mute @user –≤—Ä–µ–º—è` - –∑–∞–º—É—Ç–∏—Ç—å\n"
        "‚Ä¢ `/unmute @user` - —Ä–∞–∑–º—É—Ç–∏—Ç—å\n"
        "‚Ä¢ `/banlist` - —Å–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö\n\n"
        "*–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!*"
    )
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:back")]]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

@admin_only_with_delete
async def say_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /say command for moderators to send messages to users"""
    
    if not context.args or len(context.args) < 2:
        text = (
            "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /say:**\n\n"
            "–§–æ—Ä–º–∞—Ç: `/say –ø–æ–ª—É—á–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–µ`\n\n"
            "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
            "‚Ä¢ `/say @john –í–∞—à –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω`\n"
            "‚Ä¢ `/say 123456789 –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞`\n"
            "‚Ä¢ `/say ID_123456789 –ü–æ—Å—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏`\n\n"
            "–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞."
        )
        
        if update.effective_chat.type in ['group', 'supergroup']:
            try:
                await context.bot.send_message(
                    chat_id=update.effective_user.id,
                    text=text,
                    parse_mode='Markdown'
                )
            except:
                pass
        else:
            await update.message.reply_text(text, parse_mode='Markdown')
        return
    
    target = context.args[0]
    message = ' '.join(context.args[1:])
    
    target_user_id = None
    
    if target.startswith('@'):
        username = target[1:]
        target_user_id = await get_user_id_by_username(username)
        if not target_user_id:
            if update.effective_chat.type == 'private':
                await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
    elif target.startswith('ID_'):
        try:
            target_user_id = int(target[3:])
        except ValueError:
            if update.effective_chat.type == 'private':
                await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID")
            return
    elif target.isdigit():
        target_user_id = int(target)
    else:
        if update.effective_chat.type == 'private':
            await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
        return
    
    try:
        await context.bot.send_message(
            chat_id=target_user_id,
            text=f"üì¢ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:**\n\n{message}",
            parse_mode='Markdown'
        )
        
        result_text = (
            f"‚úÖ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!**\n\n"
            f"üì§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {target}\n"
            f"üìù –¢–µ–∫—Å—Ç: {message[:100]}{'...' if len(message) > 100 else ''}"
        )
        
        if update.effective_chat.type in ['group', 'supergroup']:
            # –í –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –∏ —É–¥–∞–ª—è–µ–º
            msg = await update.effective_chat.send_message(result_text, parse_mode='Markdown')
            import asyncio
            await asyncio.sleep(5)
            try:
                await msg.delete()
            except:
                pass
            
            # –î—É–±–ª–∏—Ä—É–µ–º –≤ –õ–°
            try:
                await context.bot.send_message(
                    chat_id=update.effective_user.id,
                    text=result_text,
                    parse_mode='Markdown'
                )
            except:
                pass
        else:
            await update.message.reply_text(result_text, parse_mode='Markdown')
        
        logger.info(f"Moderator {update.effective_user.id} sent message to {target_user_id}")
        
    except Exception as e:
        error_msg = str(e)
        if "bot was blocked" in error_msg:
            error_text = f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞"
        elif "chat not found" in error_msg:
            error_text = f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        else:
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {error_msg}"
        
        if update.effective_chat.type == 'private':
            await update.message.reply_text(error_text)

async def get_user_id_by_username(username: str) -> int | None:
    """Find user ID by username"""
    try:
        from data.user_data import get_user_by_username
        user_info = get_user_by_username(username)
        return user_info['id'] if user_info else None
    except Exception as e:
        logger.error(f"Error finding user by username {username}: {e}")
        return None

@admin_only_with_delete
async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    
    if not context.args:
        text = (
            "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n"
            "`/broadcast —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è`\n\n"
            "–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞."
        )
        
        if update.effective_chat.type in ['group', 'supergroup']:
            try:
                await context.bot.send_message(
                    chat_id=update.effective_user.id,
                    text=text,
                    parse_mode='Markdown'
                )
            except:
                pass
        else:
            await update.message.reply_text(text, parse_mode='Markdown')
        return
    
    message = ' '.join(context.args)
    
    from data.user_data import user_data
    
    sent_count = 0
    failed_count = 0
    
    for user_id in user_data.keys():
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üì¢ **–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:**\n\n{message}",
                parse_mode='Markdown'
            )
            sent_count += 1
        except Exception as e:
            logger.error(f"Failed to send broadcast to {user_id}: {e}")
            failed_count += 1
    
    result_text = (
        f"‚úÖ **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
        f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {failed_count}"
    )
    
    if update.effective_chat.type in ['group', 'supergroup']:
        try:
            await context.bot.send_message(
                chat_id=update.effective_user.id,
                text=result_text,
                parse_mode='Markdown'
            )
        except:
            pass
    else:
        await update.message.reply_text(result_text, parse_mode='Markdown')
    
    logger.info(f"Broadcast completed: {sent_count} sent, {failed_count} failed")
