# -*- coding: utf-8 -*-
from telegram import Update, ChatPermissions
from telegram.ext import ContextTypes
from config import Config
from data.user_data import (
    ban_user, unban_user, mute_user, unmute_user,
    is_user_banned, is_user_muted, get_user_by_username,
    get_user_by_id, get_banned_users, get_top_users,
    update_user_activity, user_data
)
from services.admin_notifications import admin_notifications
from datetime import datetime, timedelta
import logging

logger = logging.getLogger(__name__)

async def ban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ü–û–õ–ù–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê –≤–µ–∑–¥–µ + –≤ –±–æ—Ç–µ"""
    if not Config.is_moderator(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ —á–∞—Ç–∞
    if update.effective_chat.type in ['group', 'supergroup']:
        try:
            await update.message.delete()
        except:
            pass

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã
    if not update.message.reply_to_message and not context.args:
        await context.bot.send_message(
            chat_id=update.effective_user.id,
            text=(
                "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n"
                "‚Ä¢ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: `/ban –ø—Ä–∏—á–∏–Ω–∞`\n"
                "‚Ä¢ –ò–ª–∏ —É–∫–∞–∂–∏—Ç–µ: `/ban @username –ø—Ä–∏—á–∏–Ω–∞`"
            ),
            parse_mode='Markdown'
        )
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª—å
    if update.message.reply_to_message:
        target_user = update.message.reply_to_message.from_user
        target_id = target_user.id
        target_username = target_user.username or f"ID_{target_id}"
        reason = ' '.join(context.args) if context.args else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    else:
        target = context.args[0]
        reason = ' '.join(context.args[1:]) if len(context.args) > 1 else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

        user_info = None
        if target.startswith('@'):
            user_info = get_user_by_username(target[1:])
        elif target.isdigit():
            user_info = get_user_by_id(int(target))

        if not user_info:
            await context.bot.send_message(
                chat_id=update.effective_user.id,
                text="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
            return

        target_id = user_info['id']
        target_username = user_info['username']

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞/–∞–¥–º–∏–Ω–∞
    if Config.is_moderator(target_id):
        await context.bot.send_message(
            chat_id=update.effective_user.id,
            text="‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        )
        return

    banned_chats = []
    failed_chats = []

    # 1. –ë–∞–Ω–∏–º –≤ BUDAPEST CHAT (–æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç)
    try:
        await context.bot.ban_chat_member(
            chat_id=Config.BUDAPEST_CHAT_ID,
            user_id=target_id
        )
        banned_chats.append("–ë—É–¥–∞–ø–µ—à—Ç —á–∞—Ç")
        logger.info(f"Banned {target_id} in Budapest chat")
    except Exception as e:
        logger.error(f"Failed to ban in Budapest chat: {e}")
        failed_chats.append("–ë—É–¥–∞–ø–µ—à—Ç —á–∞—Ç")

    # 2. –ë–∞–Ω–∏–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —á–∞—Ç–µ (CHAT_FOR_ACTUAL)
    if Config.CHAT_FOR_ACTUAL != Config.BUDAPEST_CHAT_ID:
        try:
            await context.bot.ban_chat_member(
                chat_id=Config.CHAT_FOR_ACTUAL,
                user_id=target_id
            )
            banned_chats.append("–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ —á–∞—Ç")
            logger.info(f"Banned {target_id} in actual chat")
        except Exception as e:
            logger.error(f"Failed to ban in actual chat: {e}")
            failed_chats.append("–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ —á–∞—Ç")

    # 3. –ë–∞–Ω–∏–º –≤ –≥—Ä—É–ø–ø–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    try:
        await context.bot.ban_chat_member(
            chat_id=Config.MODERATION_GROUP_ID,
            user_id=target_id
        )
        banned_chats.append("–ì—Ä—É–ø–ø–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
        logger.info(f"Banned {target_id} in moderation group")
    except Exception as e:
        logger.error(f"Failed to ban in moderation group: {e}")
        failed_chats.append("–ì—Ä—É–ø–ø–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")

    # 4. –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–±–∞–Ω–∏—Ç—å –≤ –∫–∞–Ω–∞–ª–∞—Ö (–µ—Å–ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω)
    channels_to_ban = [
        (Config.TARGET_CHANNEL_ID, "–ö–∞–Ω–∞–ª –ë—É–¥–∞–ø–µ—à—Ç"),
        (Config.TRADE_CHANNEL_ID, "–¢–æ—Ä–≥–æ–≤—ã–π –∫–∞–Ω–∞–ª")
    ]
    
    for channel_id, channel_name in channels_to_ban:
        try:
            await context.bot.ban_chat_member(
                chat_id=channel_id,
                user_id=target_id
            )
            banned_chats.append(channel_name)
            logger.info(f"Banned {target_id} in {channel_name}")
        except Exception as e:
            logger.warning(f"Could not ban in {channel_name}: {e}")
            # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ failed_chats, —Ç.–∫. —ç—Ç–æ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ

    # 5. –ö–†–ò–¢–ò–ß–ù–û: –§–∏–∫—Å–∏—Ä—É–µ–º –ë–ê–ù –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î (–±–ª–æ–∫–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞)
    ban_user(target_id, reason)
    logger.info(f"User {target_id} marked as banned in local database")

    # 6. –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    await admin_notifications.notify_ban(
        username=target_username,
        user_id=target_id,
        reason=reason,
        moderator=update.effective_user.username or str(update.effective_user.id)
    )

    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    result_text = (
        f"üö´ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ü–û–õ–ù–û–°–¢–¨–Æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:**\n\n"
        f"üë§ @{target_username} (ID: {target_id})\n"
        f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
        f"üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: @{update.effective_user.username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n"
        f"üîí **–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏:**\n"
        f"‚Ä¢ –ë–æ—Ç: ‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n"
    )
    
    if banned_chats:
        result_text += f"‚Ä¢ –ß–∞—Ç—ã: ‚úÖ {', '.join(banned_chats)}\n"
    if failed_chats:
        result_text += f"‚Ä¢ –ù–µ —É–¥–∞–ª–æ—Å—å: ‚ö†Ô∏è {', '.join(failed_chats)}\n"

    result_text += f"\n‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"

    await context.bot.send_message(
        chat_id=update.effective_user.id,
        text=result_text,
        parse_mode='Markdown'
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –±–∞–Ω–µ
    try:
        await context.bot.send_message(
            chat_id=target_id,
            text=(
                f"üö´ **–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã**\n\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                f"üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: @{update.effective_user.username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n"
                f"‚õîÔ∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ:\n"
                f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞\n"
                f"‚Ä¢ –ü–∏—Å–∞—Ç—å –≤ —á–∞—Ç–∞—Ö –ë—É–¥–∞–ø–µ—à—Ç\n"
                f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n\n"
                f"üìû –î–ª—è –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏"
            ),
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.warning(f"Could not notify user about ban: {e}")

    logger.info(f"User {target_id} FULLY banned by {update.effective_user.id}")

async def unban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –í–ï–ó–î–ï"""
    if not Config.is_moderator(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    if not context.args:
        await update.message.reply_text(
            "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n"
            "`/unban @username` –∏–ª–∏ `/unban ID`",
            parse_mode='Markdown'
        )
        return

    target = context.args[0]
    user_info = None
    target_id = None

    if target.startswith('@'):
        user_info = get_user_by_username(target[1:])
    elif target.isdigit():
        user_info = get_user_by_id(int(target))

    if not user_info:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    target_id = user_info['id']

    if not is_user_banned(target_id):
        await update.message.reply_text("‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–∞–Ω–µ–Ω")
        return

    unbanned_chats = []
    
    # –†–∞–∑–±–∞–Ω–∏–≤–∞–µ–º –≤–µ–∑–¥–µ
    chats_to_unban = [
        (Config.BUDAPEST_CHAT_ID, "–ë—É–¥–∞–ø–µ—à—Ç —á–∞—Ç"),
        (Config.CHAT_FOR_ACTUAL, "–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ —á–∞—Ç"),
        (Config.MODERATION_GROUP_ID, "–ì—Ä—É–ø–ø–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"),
        (Config.TARGET_CHANNEL_ID, "–ö–∞–Ω–∞–ª –ë—É–¥–∞–ø–µ—à—Ç"),
        (Config.TRADE_CHANNEL_ID, "–¢–æ—Ä–≥–æ–≤—ã–π –∫–∞–Ω–∞–ª")
    ]
    
    for chat_id, chat_name in chats_to_unban:
        try:
            await context.bot.unban_chat_member(
                chat_id=chat_id,
                user_id=target_id,
                only_if_banned=True
            )
            unbanned_chats.append(chat_name)
            logger.info(f"Unbanned {target_id} in {chat_name}")
        except Exception as e:
            logger.warning(f"Could not unban in {chat_name}: {e}")

    # –†–∞–∑–±–∞–Ω–∏–≤–∞–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
    unban_user(target_id)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await admin_notifications.notify_unban(
        username=user_info['username'],
        user_id=target_id,
        moderator=update.effective_user.username or str(update.effective_user.id)
    )

    result_text = (
        f"‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:**\n\n"
        f"üë§ @{user_info['username']} (ID: {target_id})\n"
        f"üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: @{update.effective_user.username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n"
    )
    
    if unbanned_chats:
        result_text += f"üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤: {', '.join(unbanned_chats)}\n"
    
    result_text += f"\n‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"

    await update.message.reply_text(result_text, parse_mode='Markdown')
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await context.bot.send_message(
            chat_id=target_id,
            text=(
                f"‚úÖ **–í–∞—à–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω—è—Ç–∞**\n\n"
                f"üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: @{update.effective_user.username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n"
                f"üéâ –í—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞:\n"
                f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞\n"
                f"‚Ä¢ –ü–∏—Å–∞—Ç—å –≤ —á–∞—Ç–∞—Ö\n"
                f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n\n"
                f"‚ö†Ô∏è –°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞!"
            ),
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.warning(f"Could not notify user about unban: {e}")

    logger.info(f"User {target_id} unbanned by {update.effective_user.id}")

async def mute_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ó–ê–ü–†–ï–¢ –ø–∏—Å–∞—Ç—å –≤ Budapest Chat + –≤ –±–æ—Ç–µ"""
    if not Config.is_moderator(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    if update.effective_chat.type in ['group', 'supergroup']:
        try:
            await update.message.delete()
        except:
            pass

    if not update.message.reply_to_message and len(context.args) < 2:
        await context.bot.send_message(
            chat_id=update.effective_user.id,
            text=(
                "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n"
                "‚Ä¢ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: `/mute 10m`\n"
                "‚Ä¢ –ò–ª–∏ —É–∫–∞–∂–∏—Ç–µ: `/mute @username 10m`\n\n"
                "–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: 10m, 2h, 1d, 7d"
            ),
            parse_mode='Markdown'
        )
        return

    if update.message.reply_to_message:
        target_user = update.message.reply_to_message.from_user
        target_id = target_user.id
        target_username = target_user.username or f"ID_{target_id}"
        time_str = context.args[0] if context.args else "10m"
    else:
        target = context.args[0]
        time_str = context.args[1] if len(context.args) > 1 else "10m"
        user_info = None
        if target.startswith('@'):
            user_info = get_user_by_username(target[1:])
        elif target.isdigit():
            user_info = get_user_by_id(int(target))

        if not user_info:
            await context.bot.send_message(
                chat_id=update.effective_user.id,
                text="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
            return

        target_id = user_info['id']
        target_username = user_info['username']

    # –ü–∞—Ä—Å–∏–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    try:
        if time_str.endswith('m'):
            seconds = int(time_str[:-1]) * 60
        elif time_str.endswith('h'):
            seconds = int(time_str[:-1]) * 3600
        elif time_str.endswith('d'):
            seconds = int(time_str[:-1]) * 86400
        else:
            raise ValueError
    except:
        await context.bot.send_message(chat_id=update.effective_user.id, text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
        return

    if Config.is_moderator(target_id):
        await context.bot.send_message(chat_id=update.effective_user.id, text="‚ùå –ù–µ–ª—å–∑—è –∑–∞–º—É—Ç–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
        return

    mute_until = datetime.now() + timedelta(seconds=seconds)
    muted_chats = []
    failed_chats = []

    # –ú—É—Ç–∏–º –≤ Budapest Chat (–ì–õ–ê–í–ù–û–ï)
    try:
        await context.bot.restrict_chat_member(
            chat_id=Config.BUDAPEST_CHAT_ID,
            user_id=target_id,
            permissions=ChatPermissions(can_send_messages=False),
            until_date=mute_until
        )
        muted_chats.append("–ë—É–¥–∞–ø–µ—à—Ç —á–∞—Ç")
        logger.info(f"Muted {target_id} in Budapest chat")
    except Exception as e:
        logger.error(f"Failed to mute in Budapest chat: {e}")
        failed_chats.append("–ë—É–¥–∞–ø–µ—à—Ç —á–∞—Ç")

    # –ú—É—Ç–∏–º –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Ç–∞—Ö
    try:
        await context.bot.restrict_chat_member(
            chat_id=Config.CHAT_FOR_ACTUAL,
            user_id=target_id,
            permissions=ChatPermissions(can_send_messages=False),
            until_date=mute_until
        )
        muted_chats.append("–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ —á–∞—Ç")
    except Exception as e:
        logger.error(f"Failed to mute in actual chat: {e}")
        failed_chats.append("–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ —á–∞—Ç")

    # –ö–†–ò–¢–ò–ß–ù–û: –ú—É—Ç–∏–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î (–±–ª–æ–∫–∏—Ä—É–µ—Ç –±–æ—Ç–∞)
    mute_user(target_id, mute_until)

    await admin_notifications.notify_mute(
        username=target_username,
        user_id=target_id,
        duration=time_str,
        moderator=update.effective_user.username or str(update.effective_user.id)
    )

    result_text = (
        f"üîá **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–º—É—á–µ–Ω:**\n\n"
        f"üë§ @{target_username} (ID: {target_id})\n"
        f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {time_str}\n"
        f"üïê –î–æ: {mute_until.strftime('%d.%m.%Y %H:%M')}\n\n"
        f"üîí **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**\n"
        f"‚Ä¢ –ë–æ—Ç: ‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n"
    )
    
    if muted_chats:
        result_text += f"‚Ä¢ –ß–∞—Ç—ã: ‚úÖ {', '.join(muted_chats)}\n"
    if failed_chats:
        result_text += f"‚Ä¢ –ù–µ —É–¥–∞–ª–æ—Å—å: ‚ö†Ô∏è {', '.join(failed_chats)}"

    await context.bot.send_message(chat_id=update.effective_user.id, text=result_text, parse_mode='Markdown')
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await context.bot.send_message(
            chat_id=target_id,
            text=(
                f"üîá **–í—ã –ø–æ–ª—É—á–∏–ª–∏ –º—É—Ç**\n\n"
                f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {time_str}\n"
                f"üïê –î–æ: {mute_until.strftime('%d.%m.%Y %H:%M')}\n"
                f"üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: @{update.effective_user.username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n"
                f"‚õîÔ∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ:\n"
                f"‚Ä¢ –ü–∏—Å–∞—Ç—å –≤ —á–∞—Ç–∞—Ö –ë—É–¥–∞–ø–µ—à—Ç\n"
                f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞\n\n"
                f"‚ö†Ô∏è –í–æ–∑–¥–µ—Ä–∂–∏—Ç–µ—Å—å –æ—Ç –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø—Ä–∞–≤–∏–ª"
            ),
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.warning(f"Could not notify user about mute: {e}")

    logger.info(f"User {target_id} muted by {update.effective_user.id} for {time_str}")

async def unmute_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–∞–∑–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –í–ï–ó–î–ï"""
    if not Config.is_moderator(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    if not context.args:
        await update.message.reply_text(
            "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n"
            "`/unmute @username` –∏–ª–∏ `/unmute ID`",
            parse_mode='Markdown'
        )
        return

    target = context.args[0]
    user_info = None
    if target.startswith('@'):
        user_info = get_user_by_username(target[1:])
    elif target.isdigit():
        user_info = get_user_by_id(int(target))

    if not user_info:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    target_id = user_info['id']

    if not is_user_muted(target_id):
        await update.message.reply_text("‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–º—É—á–µ–Ω")
        return

    unmuted_chats = []
    
    # –†–∞–∑–º—É—á–∏–≤–∞–µ–º –≤–µ–∑–¥–µ
    chats_to_unmute = [
        (Config.BUDAPEST_CHAT_ID, "–ë—É–¥–∞–ø–µ—à—Ç —á–∞—Ç"),
        (Config.CHAT_FOR_ACTUAL, "–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ —á–∞—Ç")
    ]
    
    for chat_id, chat_name in chats_to_unmute:
        try:
            await context.bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=target_id,
                permissions=ChatPermissions(
                    can_send_messages=True,
                    can_send_media_messages=True,
                    can_send_polls=True,
                    can_send_other_messages=True,
                    can_add_web_page_previews=True
                )
            )
            unmuted_chats.append(chat_name)
        except Exception as e:
            logger.warning(f"Could not unmute in {chat_name}: {e}")

    # –†–∞–∑–º—É—á–∏–≤–∞–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
    unmute_user(target_id)

    await admin_notifications.notify_unmute(
        username=user_info['username'],
        user_id=target_id,
        moderator=update.effective_user.username or str(update.effective_user.id)
    )

    result_text = (
        f"üîä **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–º—É—á–µ–Ω:**\n\n"
        f"üë§ @{user_info['username']} (ID: {target_id})\n"
        f"üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: @{update.effective_user.username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n"
    )
    
    if unmuted_chats:
        result_text += f"üîì –†–∞–∑–º—É—á–µ–Ω –≤: {', '.join(unmuted_chats)}\n"
    
    result_text += f"\n‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"

    await update.message.reply_text(result_text, parse_mode='Markdown')
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await context.bot.send_message(
            chat_id=target_id,
            text=(
                f"üîä **–í–∞—à –º—É—Ç —Å–Ω—è—Ç**\n\n"
                f"üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: @{update.effective_user.username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n"
                f"üéâ –í—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç–∞—Ö –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞\n\n"
                f"‚ö†Ô∏è –°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞!"
            ),
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.warning(f"Could not notify user about unmute: {e}")

    logger.info(f"User {target_id} unmuted by {update.effective_user.id}")

async def banlist_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not Config.is_moderator(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    banned_users = get_banned_users()
    if not banned_users:
        await update.message.reply_text("üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø—É—Å—Ç")
        return

    text = f"üö´ **–°–ü–ò–°–û–ö –ó–ê–ë–ê–ù–ï–ù–ù–´–•** ({len(banned_users)}):\n\n"
    for i, user in enumerate(banned_users, 1):
        reason = user.get('ban_reason', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
        ban_date = user.get('banned_at', datetime.now()).strftime('%d.%m.%Y')
        text += f"{i}. @{user['username']} (ID: {user['id']})\n"
        text += f"   üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
        text += f"   üìÖ –î–∞—Ç–∞: {ban_date}\n\n"
        if len(text) > 3500:
            await update.message.reply_text(text, parse_mode='Markdown')
            text = ""

    if text:
        await update.message.reply_text(text, parse_mode='Markdown')

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã)"""
    if not Config.is_moderator(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    total_users = len(user_data)
    active_24h = sum(1 for data in user_data.values() if 
                    datetime.now() - data['last_activity'] <= timedelta(days=1))
    active_7d = sum(1 for data in user_data.values() if 
                   datetime.now() - data['last_activity'] <= timedelta(days=7))
    total_messages = sum(data['message_count'] for data in user_data.values())
    banned_count = sum(1 for data in user_data.values() if data.get('banned'))
    muted_count = sum(1 for data in user_data.values() if 
                     data.get('muted_until') and data['muted_until'] > datetime.now())
    
    text = (
        f"üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê**\n\n"
        f"üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
        f"‚Ä¢ –í—Å–µ–≥–æ: {total_users}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24—á: {active_24h}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 7–¥: {active_7d}\n\n"
        f"üí¨ **–°–æ–æ–±—â–µ–Ω–∏—è:**\n"
        f"‚Ä¢ –í—Å–µ–≥–æ: {total_messages}\n"
        f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {total_messages // total_users if total_users > 0 else 0}\n\n"
        f"üî® **–ú–æ–¥–µ—Ä–∞—Ü–∏—è:**\n"
        f"‚Ä¢ –ó–∞–±–∞–Ω–µ–Ω–æ: {banned_count}\n"
        f"‚Ä¢ –í –º—É—Ç–µ: {muted_count}\n\n"
        f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def top_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã)"""
    if not Config.is_moderator(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    limit = 10
    if context.args and context.args[0].isdigit():
        limit = min(int(context.args[0]), 50)
    
    top_users = get_top_users(limit)
    
    if not top_users:
        await update.message.reply_text("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö")
        return
    
    text = f"üèÜ **–¢–û–ü-{len(top_users)} –ê–ö–¢–ò–í–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô**\n\n"
    
    medals = {1: "ü•á", 2: "ü•à", 3: "ü•â"}
    
    for i, user in enumerate(top_users, 1):
        medal = medals.get(i, f"{i}.")
        last_seen = user['last_activity'].strftime('%d.%m.%Y')
        
        text += (
            f"{medal} @{user['username']}\n"
            f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {user['message_count']}\n"
            f"   üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_seen}\n\n"
        )
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def lastseen_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã)"""
    if not Config.is_moderator(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args:
        await update.message.reply_text(
            "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n"
            "`/lastseen @username` –∏–ª–∏\n"
            "`/lastseen ID`",
            parse_mode='Markdown'
        )
        return
    
    target = context.args[0]
    user_info = None
    
    if target.startswith('@'):
        username = target[1:]
        user_info = get_user_by_username(username)
    elif target.isdigit():
        target_id = int(target)
        user_info = get_user_by_id(target_id)
    
    if not user_info:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    last_activity = user_info['last_activity']
    time_diff = datetime.now() - last_activity
    
    if time_diff.days > 0:
        time_ago = f"{time_diff.days} –¥–Ω–µ–π –Ω–∞–∑–∞–¥"
    elif time_diff.seconds >= 3600:
        hours = time_diff.seconds // 3600
        time_ago = f"{hours} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥"
    elif time_diff.seconds >= 60:
        minutes = time_diff.seconds // 60
        time_ago = f"{minutes} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥"
    else:
        time_ago = "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
    
    status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
    if user_info.get('banned'):
        status = "üö´ –ó–∞–±–∞–Ω–µ–Ω"
    elif user_info.get('muted_until') and user_info['muted_until'] > datetime.now():
        status = "üîá –ó–∞–º—É—á–µ–Ω"
    
    text = (
        f"üë§ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:**\n\n"
        f"–ò–º—è: @{user_info['username']}\n"
        f"ID: `{user_info['id']}`\n"
        f"–°—Ç–∞—Ç—É—Å: {status}\n"
        f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {user_info['message_count']}\n"
        f"üìÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: {user_info['join_date'].strftime('%d.%m.%Y')}\n"
        f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity.strftime('%d.%m.%Y %H:%M')}\n"
        f"üïê –ë—ã–ª(–∞): {time_ago}"
    )
    
    await update.message.reply_text(text, parse_mode='Markdown')

__all__ = [
    'ban_command',
    'unban_command',
    'mute_command',
    'unmute_command',
    'banlist_command',
    'stats_command',
    'top_command',
    'lastseen_command'
]
