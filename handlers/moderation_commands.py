# -*- coding: utf-8 -*-
from telegram import Update
from telegram.ext import ContextTypes
from config import Config
from data.user_data import (
    ban_user, unban_user, mute_user, unmute_user,
    is_user_banned, is_user_muted, get_user_by_username,
    get_user_by_id, get_banned_users, get_top_users,
    update_user_activity, user_data
)
from services.admin_notifications import admin_notifications
from datetime import datetime, timedelta
import logging

logger = logging.getLogger(__name__)

async def ban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã)"""
    if not Config.is_moderator(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args:
        await update.message.reply_text(
            "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n"
            "`/ban @username –ø—Ä–∏—á–∏–Ω–∞` –∏–ª–∏\n"
            "`/ban ID –ø—Ä–∏—á–∏–Ω–∞`",
            parse_mode='Markdown'
        )
        return
    
    target = context.args[0]
    reason = ' '.join(context.args[1:]) if len(context.args) > 1 else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = None
    target_id = None
    
    if target.startswith('@'):
        username = target[1:]
        user_info = get_user_by_username(username)
        if user_info:
            target_id = user_info['id']
    elif target.isdigit():
        target_id = int(target)
        user_info = get_user_by_id(target_id)
    
    if not user_info:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–Ω –∞–¥–º–∏–Ω–∞ –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    if Config.is_moderator(target_id):
        await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ban_user(target_id, reason)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫—É—é –≥—Ä—É–ø–ø—É
    await admin_notifications.notify_ban(
        username=user_info['username'],
        user_id=target_id,
        reason=reason,
        moderator=update.effective_user.username or str(update.effective_user.id)
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result_text = (
        f"üö´ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:**\n\n"
        f"üë§ @{user_info['username']} (ID: {target_id})\n"
        f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
        f"üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: @{update.effective_user.username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
        f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )
    
    await update.message.reply_text(result_text, parse_mode='Markdown')
    
    logger.info(f"User {target_id} banned by {update.effective_user.id}, reason: {reason}")

async def unban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã)"""
    if not Config.is_moderator(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args:
        await update.message.reply_text(
            "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n"
            "`/unban @username` –∏–ª–∏\n"
            "`/unban ID`",
            parse_mode='Markdown'
        )
        return
    
    target = context.args[0]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = None
    target_id = None
    
    if target.startswith('@'):
        username = target[1:]
        user_info = get_user_by_username(username)
        if user_info:
            target_id = user_info['id']
    elif target.isdigit():
        target_id = int(target)
        user_info = get_user_by_id(target_id)
    
    if not user_info:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if not is_user_banned(target_id):
        await update.message.reply_text("‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–∞–Ω–µ–Ω")
        return
    
    # –†–∞–∑–±–∞–Ω–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    unban_user(target_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫—É—é –≥—Ä—É–ø–ø—É
    await admin_notifications.notify_unban(
        username=user_info['username'],
        user_id=target_id,
        moderator=update.effective_user.username or str(update.effective_user.id)
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result_text = (
        f"‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:**\n\n"
        f"üë§ @{user_info['username']} (ID: {target_id})\n"
        f"üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: @{update.effective_user.username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
        f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )
    
    await update.message.reply_text(result_text, parse_mode='Markdown')
    
    logger.info(f"User {target_id} unbanned by {update.effective_user.id}")

async def mute_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã)"""
    if not Config.is_moderator(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if len(context.args) < 2:
        await update.message.reply_text(
            "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n"
            "`/mute @username –≤—Ä–µ–º—è`\n\n"
            "–í—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "‚Ä¢ `10m` - 10 –º–∏–Ω—É—Ç\n"
            "‚Ä¢ `2h` - 2 —á–∞—Å–∞\n"
            "‚Ä¢ `1d` - 1 –¥–µ–Ω—å\n"
            "‚Ä¢ `7d` - 7 –¥–Ω–µ–π",
            parse_mode='Markdown'
        )
        return
    
    target = context.args[0]
    time_str = context.args[1]
    
    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
    try:
        if time_str.endswith('m'):
            seconds = int(time_str[:-1]) * 60
        elif time_str.endswith('h'):
            seconds = int(time_str[:-1]) * 3600
        elif time_str.endswith('d'):
            seconds = int(time_str[:-1]) * 86400
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
            return
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = None
    target_id = None
    
    if target.startswith('@'):
        username = target[1:]
        user_info = get_user_by_username(username)
        if user_info:
            target_id = user_info['id']
    elif target.isdigit():
        target_id = int(target)
        user_info = get_user_by_id(target_id)
    
    if not user_info:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É—Ç –∞–¥–º–∏–Ω–∞ –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    if Config.is_moderator(target_id):
        await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –∑–∞–º—É—Ç–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –ú—É—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    mute_until = datetime.now() + timedelta(seconds=seconds)
    mute_user(target_id, mute_until)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫—É—é –≥—Ä—É–ø–ø—É
    await admin_notifications.notify_mute(
        username=user_info['username'],
        user_id=target_id,
        duration=time_str,
        moderator=update.effective_user.username or str(update.effective_user.id)
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result_text = (
        f"üîá **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–º—É—á–µ–Ω:**\n\n"
        f"üë§ @{user_info['username']} (ID: {target_id})\n"
        f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {time_str}\n"
        f"üïê –î–æ: {mute_until.strftime('%d.%m.%Y %H:%M')}\n"
        f"üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: @{update.effective_user.username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
    )
    
    await update.message.reply_text(result_text, parse_mode='Markdown')
    
    logger.info(f"User {target_id} muted by {update.effective_user.id} for {time_str}")

async def unmute_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–∞–∑–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã)"""
    if not Config.is_moderator(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args:
        await update.message.reply_text(
            "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n"
            "`/unmute @username` –∏–ª–∏\n"
            "`/unmute ID`",
            parse_mode='Markdown'
        )
        return
    
    target = context.args[0]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = None
    target_id = None
    
    if target.startswith('@'):
        username = target[1:]
        user_info = get_user_by_username(username)
        if user_info:
            target_id = user_info['id']
    elif target.isdigit():
        target_id = int(target)
        user_info = get_user_by_id(target_id)
    
    if not user_info:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if not is_user_muted(target_id):
        await update.message.reply_text("‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–º—É—á–µ–Ω")
        return
    
    # –†–∞–∑–º—É—á–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    unmute_user(target_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫—É—é –≥—Ä—É–ø–ø—É
    await admin_notifications.notify_unmute(
        username=user_info['username'],
        user_id=target_id,
        moderator=update.effective_user.username or str(update.effective_user.id)
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result_text = (
        f"üîä **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–º—É—á–µ–Ω:**\n\n"
        f"üë§ @{user_info['username']} (ID: {target_id})\n"
        f"üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: @{update.effective_user.username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
        f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )
    
    await update.message.reply_text(result_text, parse_mode='Markdown')
    
    logger.info(f"User {target_id} unmuted by {update.effective_user.id}")

async def banlist_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã)"""
    if not Config.is_moderator(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    banned_users = get_banned_users()
    
    if not banned_users:
        await update.message.reply_text("üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø—É—Å—Ç")
        return
    
    text = f"üö´ **–°–ü–ò–°–û–ö –ó–ê–ë–ê–ù–ï–ù–ù–´–•** ({len(banned_users)}):\n\n"
    
    for i, user in enumerate(banned_users, 1):
        ban_reason = user.get('ban_reason', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
        ban_date = user.get('banned_at', datetime.now()).strftime('%d.%m.%Y')
        
        text += f"{i}. @{user['username']} (ID: {user['id']})\n"
        text += f"   üìù –ü—Ä–∏—á–∏–Ω–∞: {ban_reason}\n"
        text += f"   üìÖ –î–∞—Ç–∞: {ban_date}\n\n"
        
        # Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(text) > 3500:
            await update.message.reply_text(text, parse_mode='Markdown')
            text = ""
    
    if text:
        await update.message.reply_text(text, parse_mode='Markdown')

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã)"""
    if not Config.is_moderator(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    total_users = len(user_data)
    active_24h = sum(1 for data in user_data.values() if 
                    datetime.now() - data['last_activity'] <= timedelta(days=1))
    active_7d = sum(1 for data in user_data.values() if 
                   datetime.now() - data['last_activity'] <= timedelta(days=7))
    total_messages = sum(data['message_count'] for data in user_data.values())
    banned_count = sum(1 for data in user_data.values() if data.get('banned'))
    muted_count = sum(1 for data in user_data.values() if 
                     data.get('muted_until') and data['muted_until'] > datetime.now())
    
    text = (
        f"üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê**\n\n"
        f"üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
        f"‚Ä¢ –í—Å–µ–≥–æ: {total_users}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24—á: {active_24h}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 7–¥: {active_7d}\n\n"
        f"üí¨ **–°–æ–æ–±—â–µ–Ω–∏—è:**\n"
        f"‚Ä¢ –í—Å–µ–≥–æ: {total_messages}\n"
        f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {total_messages // total_users if total_users > 0 else 0}\n\n"
        f"üî® **–ú–æ–¥–µ—Ä–∞—Ü–∏—è:**\n"
        f"‚Ä¢ –ó–∞–±–∞–Ω–µ–Ω–æ: {banned_count}\n"
        f"‚Ä¢ –í –º—É—Ç–µ: {muted_count}\n\n"
        f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def top_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã)"""
    if not Config.is_moderator(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–æ–ø–µ
    limit = 10
    if context.args and context.args[0].isdigit():
        limit = min(int(context.args[0]), 50)  # –ú–∞–∫—Å–∏–º—É–º 50
    
    top_users = get_top_users(limit)
    
    if not top_users:
        await update.message.reply_text("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö")
        return
    
    text = f"üèÜ **–¢–û–ü-{len(top_users)} –ê–ö–¢–ò–í–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô**\n\n"
    
    medals = {1: "ü•á", 2: "ü•à", 3: "ü•â"}
    
    for i, user in enumerate(top_users, 1):
        medal = medals.get(i, f"{i}.")
        last_seen = user['last_activity'].strftime('%d.%m.%Y')
        
        text += (
            f"{medal} @{user['username']}\n"
            f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {user['message_count']}\n"
            f"   üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_seen}\n\n"
        )
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def lastseen_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã)"""
    if not Config.is_moderator(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args:
        await update.message.reply_text(
            "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n"
            "`/lastseen @username` –∏–ª–∏\n"
            "`/lastseen ID`",
            parse_mode='Markdown'
        )
        return
    
    target = context.args[0]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = None
    
    if target.startswith('@'):
        username = target[1:]
        user_info = get_user_by_username(username)
    elif target.isdigit():
        target_id = int(target)
        user_info = get_user_by_id(target_id)
    
    if not user_info:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    last_activity = user_info['last_activity']
    time_diff = datetime.now() - last_activity
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
    if time_diff.days > 0:
        time_ago = f"{time_diff.days} –¥–Ω–µ–π –Ω–∞–∑–∞–¥"
    elif time_diff.seconds >= 3600:
        hours = time_diff.seconds // 3600
        time_ago = f"{hours} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥"
    elif time_diff.seconds >= 60:
        minutes = time_diff.seconds // 60
        time_ago = f"{minutes} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥"
    else:
        time_ago = "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
    if user_info.get('banned'):
        status = "üö´ –ó–∞–±–∞–Ω–µ–Ω"
    elif user_info.get('muted_until') and user_info['muted_until'] > datetime.now():
        status = "üîá –ó–∞–º—É—á–µ–Ω"
    
    text = (
        f"üë§ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:**\n\n"
        f"–ò–º—è: @{user_info['username']}\n"
        f"ID: `{user_info['id']}`\n"
        f"–°—Ç–∞—Ç—É—Å: {status}\n"
        f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {user_info['message_count']}\n"
        f"üìÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: {user_info['join_date'].strftime('%d.%m.%Y')}\n"
        f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity.strftime('%d.%m.%Y %H:%M')}\n"
        f"üïê –ë—ã–ª(–∞): {time_ago}"
    )
    
    await update.message.reply_text(text, parse_mode='Markdown')

# –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
__all__ = [
    'ban_command',
    'unban_command',
    'mute_command',
    'unmute_command',
    'banlist_command',
    'stats_command',
    'top_command',
    'lastseen_command'
]
