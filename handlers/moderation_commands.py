# -*- coding: utf-8 -*-
from telegram import Update
from telegram.ext import ContextTypes
from config import Config
from utils.validators import parse_time
from datetime import datetime, timedelta
import logging

logger = logging.getLogger(__name__)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

def get_user_from_message(update: Update, context: ContextTypes.DEFAULT_TYPE, args: list):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ —Ä–µ–ø–ª–∞—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ø–ª–∞–π
    if update.message.reply_to_message:
        target_user = update.message.reply_to_message.from_user
        target_id = target_user.id
        return target_id, target_user.username or f"ID_{target_id}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if not args:
        return None, None
    
    target = args[0]
    
    # –ï—Å–ª–∏ —ç—Ç–æ username
    if target.startswith('@'):
        username = target[1:]
        # –ü–æ–∏—Å–∫ –≤ –∫—ç—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for uid, data in user_data.items():
            if data.get('username', '').lower() == username.lower():
                return uid, username
        return None, username  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º username –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –∫—ç—à–µ
    
    # –ï—Å–ª–∏ —ç—Ç–æ ID
    elif target.isdigit():
        target_id = int(target)
        if target_id in user_data:
            return target_id, user_data[target_id].get('username', f"ID_{target_id}")
        else:
            return target_id, f"ID_{target_id}"
    
    return None, None

def update_user_activity(user_id: int, username: str = None):
    """–û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_data:
        user_data[user_id] = {
            'id': user_id,
            'username': username or f'ID_{user_id}',
            'join_date': datetime.now(),
            'last_activity': datetime.now(),
            'message_count': 0,
            'banned': False,
            'muted_until': None
        }
    else:
        user_data[user_id]['last_activity'] = datetime.now()
        if username:
            user_data[user_id]['username'] = username
    
    user_data[user_id]['message_count'] += 1

def ban_user(user_id: int, reason: str = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"):
    """–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_data:
        user_data[user_id] = {
            'id': user_id,
            'username': f'ID_{user_id}',
            'join_date': datetime.now(),
            'last_activity': datetime.now(),
            'message_count': 0,
            'banned': True,
            'ban_reason': reason,
            'ban_date': datetime.now(),
            'muted_until': None
        }
    else:
        user_data[user_id]['banned'] = True
        user_data[user_id]['ban_reason'] = reason
        user_data[user_id]['ban_date'] = datetime.now()

def unban_user(user_id: int):
    """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id in user_data:
        user_data[user_id]['banned'] = False
        user_data[user_id].pop('ban_reason', None)
        user_data[user_id].pop('ban_date', None)

def mute_user(user_id: int, until: datetime):
    """–ó–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_data:
        user_data[user_id] = {
            'id': user_id,
            'username': f'ID_{user_id}',
            'join_date': datetime.now(),
            'last_activity': datetime.now(),
            'message_count': 0,
            'banned': False,
            'muted_until': until
        }
    else:
        user_data[user_id]['muted_until'] = until

def unmute_user(user_id: int):
    """–†–∞–∑–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id in user_data:
        user_data[user_id]['muted_until'] = None

async def ban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç @username, ID, —Ä–µ–ø–ª–∞–π)"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args and not update.message.reply_to_message:
        await update.message.reply_text(
            "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /ban:**\n\n"
            "‚Ä¢ `/ban @username –ø—Ä–∏—á–∏–Ω–∞` - –±–∞–Ω –ø–æ username\n"
            "‚Ä¢ `/ban 123456789 –ø—Ä–∏—á–∏–Ω–∞` - –±–∞–Ω –ø–æ ID\n"
            "‚Ä¢ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: `/ban –ø—Ä–∏—á–∏–Ω–∞`\n\n"
            "üí° –ü—Ä–∏—á–∏–Ω–∞ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞",
            parse_mode='Markdown'
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if update.message.reply_to_message:
        target_id, target_name = get_user_from_message(update, context, [])
        reason = ' '.join(context.args) if context.args else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    else:
        target_id, target_name = get_user_from_message(update, context, context.args)
        reason = ' '.join(context.args[1:]) if len(context.args) > 1 else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    
    if not target_id:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞–Ω
    ban_user(target_id, reason)
    
    await update.message.reply_text(
        f"üö´ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:**\n\n"
        f"üë§ {target_name}\n"
        f"üÜî ID: {target_id}\n"
        f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
        f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
        parse_mode='Markdown'
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    try:
        await context.bot.send_message(
            chat_id=Config.MODERATION_GROUP_ID,
            text=f"üö´ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω:**\n\n"
                 f"üë§ {target_name} (ID: {target_id})\n"
                 f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                 f"üëÆ‚Äç‚ôÇÔ∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: @{update.effective_user.username}",
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Error notifying moderators about ban: {e}")

async def unban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args and not update.message.reply_to_message:
        await update.message.reply_text(
            "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /unban:**\n\n"
            "‚Ä¢ `/unban @username` - —Ä–∞–∑–±–∞–Ω –ø–æ username\n"
            "‚Ä¢ `/unban 123456789` - —Ä–∞–∑–±–∞–Ω –ø–æ ID\n"
            "‚Ä¢ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: `/unban`",
            parse_mode='Markdown'
        )
        return
    
    target_id, target_name = get_user_from_message(update, context, context.args)
    
    if not target_id:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    unban_user(target_id)
    
    await update.message.reply_text(
        f"‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:**\n\n"
        f"üë§ {target_name}\n"
        f"üÜî ID: {target_id}\n"
        f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
        parse_mode='Markdown'
    )

async def mute_command(update: Update, context, re.IGNORECASE)
    return url_pattern.match(url) is not None

def is_valid_telegram_username(username: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å Telegram username"""
    if username.startswith('@'):
        username = username[1:]
    
    pattern = r'^[a-zA-Z][a-zA-Z0-9_]{4,31}: ContextTypes.DEFAULT_TYPE):
    """–í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if len(context.args) < 1 and not update.message.reply_to_message:
        await update.message.reply_text(
            "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /mute:**\n\n"
            "‚Ä¢ `/mute @username 10m` - –º—É—Ç –ø–æ username\n"
            "‚Ä¢ `/mute 123456789 1h` - –º—É—Ç –ø–æ ID\n"
            "‚Ä¢ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: `/mute 30m`\n\n"
            "‚è∞ –§–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏: 10m, 1h, 1d",
            parse_mode='Markdown'
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—Ä–µ–º—è
    if update.message.reply_to_message:
        target_id, target_name = get_user_from_message(update, context, [])
        time_str = context.args[0] if context.args else "60m"
    else:
        target_id, target_name = get_user_from_message(update, context, context.args)
        time_str = context.args[1] if len(context.args) > 1 else "60m"
    
    if not target_id:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    seconds = parse_time(time_str)
    if not seconds:
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 10m, 1h, 1d")
        return
    
    mute_until = datetime.now() + timedelta(seconds=seconds)
    mute_user(target_id, mute_until)
    
    await update.message.reply_text(
        f"üîá **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–º—É—á–µ–Ω:**\n\n"
        f"üë§ {target_name}\n"
        f"üÜî ID: {target_id}\n"
        f"‚è∞ –î–æ: {mute_until.strftime('%d.%m.%Y %H:%M')}\n"
        f"üïê –ù–∞: {time_str}",
        parse_mode='Markdown'
    )

async def unmute_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–Ω—è—Ç—å –º—É—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args and not update.message.reply_to_message:
        await update.message.reply_text(
            "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /unmute:**\n\n"
            "‚Ä¢ `/unmute @username` - —Ä–∞–∑–º—É—Ç –ø–æ username\n"
            "‚Ä¢ `/unmute 123456789` - —Ä–∞–∑–º—É—Ç –ø–æ ID\n"
            "‚Ä¢ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: `/unmute`",
            parse_mode='Markdown'
        )
        return
    
    target_id, target_name = get_user_from_message(update, context, context.args)
    
    if not target_id:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    unmute_user(target_id)
    
    await update.message.reply_text(
        f"üîä **–ú—É—Ç —Å–Ω—è—Ç:**\n\n"
        f"üë§ {target_name}\n"
        f"üÜî ID: {target_id}\n"
        f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
        parse_mode='Markdown'
    )

async def banlist_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    banned_users = [data for data in user_data.values() if data.get('banned')]
    
    if not banned_users:
        await update.message.reply_text("üìù **–ó–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç**")
        return
    
    text = f"üö´ **–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(banned_users)}):**\n\n"
    
    for i, user in enumerate(banned_users, 1):
        ban_date = user.get('ban_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        if isinstance(ban_date, datetime):
            ban_date = ban_date.strftime('%d.%m.%Y')
        text += f"{i}. @{user['username']} - {ban_date}\n"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    total_users = len(user_data)
    active_users = sum(1 for data in user_data.values() if 
                      datetime.now() - data['last_activity'] <= timedelta(days=1))
    total_messages = sum(data['message_count'] for data in user_data.values())
    banned_count = sum(1 for data in user_data.values() if data.get('banned'))
    
    text = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞:**

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ —Å—É—Ç–∫–∏: {active_users}
üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}
üö´ –ó–∞–±–∞–Ω–µ–Ω–æ: {banned_count}
üìÖ –î–∞—Ç–∞ —Å–±–æ—Ä–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}"""
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def top_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not user_data:
        await update.message.reply_text("üìù **–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö**")
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π
    sorted_users = sorted(user_data.items(), key=lambda x: x[1]['message_count'], reverse=True)[:10]
    
    text = "üèÜ **–¢–æ–ø-10 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n\n"
    
    for i, (user_id, data) in enumerate(sorted_users, 1):
        emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
        text += f"{emoji} @{data['username']} - {data['message_count']} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def lastseen_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args:
        await update.message.reply_text("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/lastseen @username`", parse_mode='Markdown')
        return
    
    target_id, target_name = get_user_from_message(update, context, context.args)
    
    if not target_id or target_id not in user_data:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user_info = user_data[target_id]
    last_seen = user_info['last_activity']
    time_diff = datetime.now() - last_seen
    
    if time_diff.seconds < 60:
        time_str = "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
    elif time_diff.seconds < 3600:
        time_str = f"{time_diff.seconds // 60} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥"
    elif time_diff.days == 0:
        time_str = f"{time_diff.seconds // 3600} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥"
    else:
        time_str = f"{time_diff.days} –¥–Ω–µ–π –Ω–∞–∑–∞–¥"
    
    await update.message.reply_text(
        f"üë§ **–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å {target_name}:**\n\n"
        f"‚è∞ {last_seen.strftime('%d.%m.%Y %H:%M')}\n"
        f"üïê {time_str}",
        parse_mode='Markdown'
    )
