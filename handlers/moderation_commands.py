from telegram import Update
from telegram.ext import ContextTypes
from config import Config
from data.user_data import (
    user_data, get_user_by_username, get_user_by_id, 
    ban_user, unban_user, mute_user, unmute_user,
    is_user_banned, is_user_muted
)
from utils.validators import parse_time
from datetime import datetime, timedelta
import logging

logger = logging.getLogger(__name__)

async def ban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args:
        await update.message.reply_text("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/ban @username –ø—Ä–∏—á–∏–Ω–∞`", parse_mode='Markdown')
        return
    
    target = context.args[0]
    reason = ' '.join(context.args[1:]) if len(context.args) > 1 else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    
    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    target_id = None
    if target.startswith('@'):
        user_info = get_user_by_username(target[1:])
        target_id = user_info['id'] if user_info else None
    elif target.isdigit():
        target_id = int(target)
        user_info = get_user_by_id(target_id)
    
    if target_id and user_info:
        ban_user(target_id, reason)
        
        await update.message.reply_text(
            f"üö´ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:**\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {target}\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
            parse_mode='Markdown'
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
        try:
            await context.bot.send_message(
                chat_id=Config.MODERATION_GROUP_ID,
                text=f"üö´ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω:**\n\n"
                     f"üë§ {target} (ID: {target_id})\n"
                     f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                     f"üëÆ‚Äç‚ôÇÔ∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: @{update.effective_user.username}",
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"Error notifying moderators: {e}")
    else:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

async def unban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args:
        await update.message.reply_text("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/unban @username`", parse_mode='Markdown')
        return
    
    target = context.args[0]
    
    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    target_id = None
    if target.startswith('@'):
        user_info = get_user_by_username(target[1:])
        target_id = user_info['id'] if user_info else None
    elif target.isdigit():
        target_id = int(target)
        user_info = get_user_by_id(target_id)
    
    if target_id and user_info:
        unban_user(target_id)
        
        await update.message.reply_text(
            f"‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:**\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {target}\n"
            f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

async def mute_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/mute @username –≤—Ä–µ–º—è` (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10m, 1h, 1d)", parse_mode='Markdown')
        return
    
    target = context.args[0]
    time_str = context.args[1]
    
    seconds = parse_time(time_str)
    if not seconds:
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 10m, 1h, 1d")
        return
    
    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    target_id = None
    if target.startswith('@'):
        user_info = get_user_by_username(target[1:])
        target_id = user_info['id'] if user_info else None
    elif target.isdigit():
        target_id = int(target)
        user_info = get_user_by_id(target_id)
    
    if target_id and user_info:
        mute_until = datetime.now() + timedelta(seconds=seconds)
        mute_user(target_id, mute_until)
        
        await update.message.reply_text(
            f"üîá **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–º—É—á–µ–Ω:**\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {target}\n"
            f"‚è∞ –î–æ: {mute_until.strftime('%d.%m.%Y %H:%M')}\n"
            f"üïê –ù–∞: {time_str}",
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

async def unmute_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–Ω—è—Ç—å –º—É—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args:
        await update.message.reply_text("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/unmute @username`", parse_mode='Markdown')
        return
    
    target = context.args[0]
    
    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    target_id = None
    if target.startswith('@'):
        user_info = get_user_by_username(target[1:])
        target_id = user_info['id'] if user_info else None
    elif target.isdigit():
        target_id = int(target)
        user_info = get_user_by_id(target_id)
    
    if target_id and user_info:
        unmute_user(target_id)
        
        await update.message.reply_text(
            f"üîä **–ú—É—Ç —Å–Ω—è—Ç:**\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {target}\n"
            f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

async def banlist_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    banned_users = [data for data in user_data.values() if data.get('banned')]
    
    if not banned_users:
        await update.message.reply_text("üìù **–ó–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç**")
        return
    
    text = f"üö´ **–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(banned_users)}):**\n\n"
    
    for i, user in enumerate(banned_users, 1):
        text += f"{i}. @{user['username']}\n"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    total_users = len(user_data)
    active_users = sum(1 for data in user_data.values() if 
                      datetime.now() - data['last_activity'] <= timedelta(days=1))
    total_messages = sum(data['message_count'] for data in user_data.values())
    banned_count = sum(1 for data in user_data.values() if data.get('banned'))
    
    text = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞:**

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ —Å—É—Ç–∫–∏: {active_users}
üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}
üö´ –ó–∞–±–∞–Ω–µ–Ω–æ: {banned_count}
üìÖ –î–∞—Ç–∞ —Å–±–æ—Ä–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}"""
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def top_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not user_data:
        await update.message.reply_text("üìù **–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö**")
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π
    sorted_users = sorted(user_data.items(), key=lambda x: x[1]['message_count'], reverse=True)[:10]
    
    text = "üèÜ **–¢–æ–ø-10 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n\n"
    
    for i, (user_id, data) in enumerate(sorted_users, 1):
        emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
        text += f"{emoji} @{data['username']} - {data['message_count']} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def lastseen_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args:
        await update.message.reply_text("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/lastseen @username`", parse_mode='Markdown')
        return
    
    target = context.args[0]
    
    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_info = None
    if target.startswith('@'):
        user_info = get_user_by_username(target[1:])
    elif target.isdigit():
        user_info = get_user_by_id(int(target))
    
    if user_info:
        last_seen = user_info['last_activity']
        time_diff = datetime.now() - last_seen
        
        if time_diff.seconds < 60:
            time_str = "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
        elif time_diff.seconds < 3600:
            time_str = f"{time_diff.seconds // 60} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥"
        elif time_diff.days == 0:
            time_str = f"{time_diff.seconds // 3600} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥"
        else:
            time_str = f"{time_diff.days} –¥–Ω–µ–π –Ω–∞–∑–∞–¥"
        
        await update.message.reply_text(
            f"üë§ **–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å {target}:**\n\n"
            f"‚è∞ {last_seen.strftime('%d.%m.%Y %H:%M')}\n"
            f"üïê {time_str}",
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
