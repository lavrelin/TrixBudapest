from telegram import Update
from telegram.ext import ContextTypes
from config import Config
from data.user_data import (
    user_data, get_user_by_username, get_user_by_id, 
    ban_user, unban_user, mute_user, unmute_user,
    is_user_banned, is_user_muted
)
from utils.validators import parse_time
from utils.decorators import moderator_only_with_delete, notify_user_in_pm
from datetime import datetime, timedelta
import logging
import asyncio

logger = logging.getLogger(__name__)

def get_target_user_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: @username, ID, reply
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ reply
    if update.message.reply_to_message:
        return update.message.reply_to_message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if not context.args:
        return None
    
    target = context.args[0]
    
    # –ï—Å–ª–∏ —ç—Ç–æ @username
    if target.startswith('@'):
        user_info = get_user_by_username(target[1:])
        return user_info['id'] if user_info else None
    
    # –ï—Å–ª–∏ —ç—Ç–æ ID
    if target.isdigit():
        return int(target)
    
    return None

@moderator_only_with_delete
@notify_user_in_pm
async def ban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç @username, ID –∏ reply"""
    
    target_id = get_target_user_id(update, context)
    
    if not target_id:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ –õ–° –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∏–∑ –≥—Ä—É–ø–ø—ã
        if update.effective_chat.type in ['group', 'supergroup']:
            try:
                await context.bot.send_message(
                    chat_id=update.effective_user.id,
                    text="üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /ban:**\n"
                         "‚Ä¢ `/ban @username –ø—Ä–∏—á–∏–Ω–∞`\n"
                         "‚Ä¢ `/ban ID –ø—Ä–∏—á–∏–Ω–∞`\n"
                         "‚Ä¢ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: `/ban –ø—Ä–∏—á–∏–Ω–∞`",
                    parse_mode='Markdown'
                )
            except:
                pass
        else:
            await update.message.reply_text(
                "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n"
                "‚Ä¢ `/ban @username –ø—Ä–∏—á–∏–Ω–∞`\n"
                "‚Ä¢ `/ban ID –ø—Ä–∏—á–∏–Ω–∞`\n"
                "‚Ä¢ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: `/ban –ø—Ä–∏—á–∏–Ω–∞`",
                parse_mode='Markdown'
            )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏—á–∏–Ω—É
    if update.message.reply_to_message:
        reason = ' '.join(context.args) if context.args else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    else:
        reason = ' '.join(context.args[1:]) if len(context.args) > 1 else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = get_user_by_id(target_id)
    
    if not user_info:
        if update.effective_chat.type == 'private':
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ban_user(target_id, reason)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result_text = (
        f"üö´ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:**\n\n"
        f"üë§ @{user_info['username']} (ID: {target_id})\n"
        f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
        f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –õ–°
    if update.effective_chat.type in ['group', 'supergroup']:
        # –í –≥—Ä—É–ø–ø–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = await update.effective_chat.send_message(result_text, parse_mode='Markdown')
        # –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(5)
        try:
            await msg.delete()
        except:
            pass
        
        # –î—É–±–ª–∏—Ä—É–µ–º –≤ –õ–° –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        try:
            await context.bot.send_message(
                chat_id=update.effective_user.id,
                text=result_text,
                parse_mode='Markdown'
            )
        except:
            pass
    else:
        await update.message.reply_text(result_text, parse_mode='Markdown')
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    try:
        await context.bot.send_message(
            chat_id=Config.MODERATION_GROUP_ID,
            text=f"üö´ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω:**\n\n"
                 f"üë§ @{user_info['username']} (ID: {target_id})\n"
                 f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                 f"üëÆ‚Äç‚ôÇÔ∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: @{update.effective_user.username}",
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Error notifying moderators: {e}")

@moderator_only_with_delete
@notify_user_in_pm
async def unban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç @username, ID –∏ reply"""
    
    target_id = get_target_user_id(update, context)
    
    if not target_id:
        if update.effective_chat.type in ['group', 'supergroup']:
            try:
                await context.bot.send_message(
                    chat_id=update.effective_user.id,
                    text="üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n"
                         "‚Ä¢ `/unban @username`\n"
                         "‚Ä¢ `/unban ID`\n"
                         "‚Ä¢ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: `/unban`",
                    parse_mode='Markdown'
                )
            except:
                pass
        else:
            await update.message.reply_text(
                "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n"
                "‚Ä¢ `/unban @username`\n"
                "‚Ä¢ `/unban ID`\n"
                "‚Ä¢ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: `/unban`",
                parse_mode='Markdown'
            )
        return
    
    user_info = get_user_by_id(target_id)
    
    if not user_info:
        if update.effective_chat.type == 'private':
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    unban_user(target_id)
    
    result_text = (
        f"‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:**\n\n"
        f"üë§ @{user_info['username']} (ID: {target_id})\n"
        f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )
    
    if update.effective_chat.type in ['group', 'supergroup']:
        msg = await update.effective_chat.send_message(result_text, parse_mode='Markdown')
        await asyncio.sleep(5)
        try:
            await msg.delete()
        except:
            pass
        
        try:
            await context.bot.send_message(
                chat_id=update.effective_user.id,
                text=result_text,
                parse_mode='Markdown'
            )
        except:
            pass
    else:
        await update.message.reply_text(result_text, parse_mode='Markdown')

@moderator_only_with_delete
@notify_user_in_pm
async def mute_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç @username, ID –∏ reply"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if update.message.reply_to_message:
        target_id = update.message.reply_to_message.from_user.id
        if not context.args:
            if update.effective_chat.type in ['group', 'supergroup']:
                try:
                    await context.bot.send_message(
                        chat_id=update.effective_user.id,
                        text="üìù –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –º—É—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10m, 1h, 1d)"
                    )
                except:
                    pass
            else:
                await update.message.reply_text("üìù –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –º—É—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10m, 1h, 1d)")
            return
        time_str = context.args[0]
    else:
        if len(context.args) < 2:
            text = (
                "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n"
                "‚Ä¢ `/mute @username –≤—Ä–µ–º—è`\n"
                "‚Ä¢ `/mute ID –≤—Ä–µ–º—è`\n"
                "‚Ä¢ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: `/mute –≤—Ä–µ–º—è`\n\n"
                "**–ü—Ä–∏–º–µ—Ä—ã –≤—Ä–µ–º–µ–Ω–∏:** 10m, 1h, 1d"
            )
            
            if update.effective_chat.type in ['group', 'supergroup']:
                try:
                    await context.bot.send_message(
                        chat_id=update.effective_user.id,
                        text=text,
                        parse_mode='Markdown'
                    )
                except:
                    pass
            else:
                await update.message.reply_text(text, parse_mode='Markdown')
            return
        
        target = context.args[0]
        time_str = context.args[1]
        
        if target.startswith('@'):
            user_info = get_user_by_username(target[1:])
            target_id = user_info['id'] if user_info else None
        elif target.isdigit():
            target_id = int(target)
        else:
            if update.effective_chat.type == 'private':
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
    
    if not target_id:
        if update.effective_chat.type == 'private':
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    seconds = parse_time(time_str)
    if not seconds:
        text = "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 10m, 1h, 1d"
        if update.effective_chat.type in ['group', 'supergroup']:
            try:
                await context.bot.send_message(
                    chat_id=update.effective_user.id,
                    text=text
                )
            except:
                pass
        else:
            await update.message.reply_text(text)
        return
    
    user_info = get_user_by_id(target_id)
    
    if not user_info:
        if update.effective_chat.type == 'private':
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    mute_until = datetime.now() + timedelta(seconds=seconds)
    mute_user(target_id, mute_until)
    
    result_text = (
        f"üîá **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–º—É—á–µ–Ω:**\n\n"
        f"üë§ @{user_info['username']} (ID: {target_id})\n"
        f"‚è∞ –î–æ: {mute_until.strftime('%d.%m.%Y %H:%M')}\n"
        f"üïê –ù–∞: {time_str}"
    )
    
    if update.effective_chat.type in ['group', 'supergroup']:
        msg = await update.effective_chat.send_message(result_text, parse_mode='Markdown')
        await asyncio.sleep(5)
        try:
            await msg.delete()
        except:
            pass
        
        try:
            await context.bot.send_message(
                chat_id=update.effective_user.id,
                text=result_text,
                parse_mode='Markdown'
            )
        except:
            pass
    else:
        await update.message.reply_text(result_text, parse_mode='Markdown')

@moderator_only_with_delete
@notify_user_in_pm
async def unmute_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–Ω—è—Ç—å –º—É—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç @username, ID –∏ reply"""
    
    target_id = get_target_user_id(update, context)
    
    if not target_id:
        text = (
            "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n"
            "‚Ä¢ `/unmute @username`\n"
            "‚Ä¢ `/unmute ID`\n"
            "‚Ä¢ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: `/unmute`"
        )
        
        if update.effective_chat.type in ['group', 'supergroup']:
            try:
                await context.bot.send_message(
                    chat_id=update.effective_user.id,
                    text=text,
                    parse_mode='Markdown'
                )
            except:
                pass
        else:
            await update.message.reply_text(text, parse_mode='Markdown')
        return
    
    user_info = get_user_by_id(target_id)
    
    if not user_info:
        if update.effective_chat.type == 'private':
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    unmute_user(target_id)
    
    result_text = (
        f"üîä **–ú—É—Ç —Å–Ω—è—Ç:**\n\n"
        f"üë§ @{user_info['username']} (ID: {target_id})\n"
        f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )
    
    if update.effective_chat.type in ['group', 'supergroup']:
        msg = await update.effective_chat.send_message(result_text, parse_mode='Markdown')
        await asyncio.sleep(5)
        try:
            await msg.delete()
        except:
            pass
        
        try:
            await context.bot.send_message(
                chat_id=update.effective_user.id,
                text=result_text,
                parse_mode='Markdown'
            )
        except:
            pass
    else:
        await update.message.reply_text(result_text, parse_mode='Markdown')

async def banlist_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not Config.is_admin(update.effective_user.id):
        if update.effective_chat.type == 'private':
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    banned_users = [data for data in user_data.values() if data.get('banned')]
    
    if not banned_users:
        await update.message.reply_text("üìù **–ó–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç**", parse_mode='Markdown')
        return
    
    text = f"üö´ **–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(banned_users)}):**\n\n"
    
    for i, user in enumerate(banned_users, 1):
        text += f"{i}. @{user['username']} (ID: {user['id']})\n"
        if user.get('ban_reason'):
            text += f"   –ü—Ä–∏—á–∏–Ω–∞: {user['ban_reason']}\n"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞"""
    if not Config.is_admin(update.effective_user.id):
        if update.effective_chat.type == 'private':
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    total_users = len(user_data)
    active_users = sum(1 for data in user_data.values() if 
                      datetime.now() - data['last_activity'] <= timedelta(days=1))
    total_messages = sum(data['message_count'] for data in user_data.values())
    banned_count = sum(1 for data in user_data.values() if data.get('banned'))
    
    text = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞:**

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ —Å—É—Ç–∫–∏: {active_users}
üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}
üö´ –ó–∞–±–∞–Ω–µ–Ω–æ: {banned_count}
üìÖ –î–∞—Ç–∞ —Å–±–æ—Ä–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}"""
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def top_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not user_data:
        await update.message.reply_text("üìù **–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö**", parse_mode='Markdown')
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π
    sorted_users = sorted(user_data.items(), key=lambda x: x[1]['message_count'], reverse=True)[:10]
    
    text = "üèÜ **–¢–æ–ø-10 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n\n"
    
    for i, (user_id, data) in enumerate(sorted_users, 1):
        emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
        text += f"{emoji} @{data['username']} - {data['message_count']} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def lastseen_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç @username, ID –∏ reply"""
    if not Config.is_admin(update.effective_user.id):
        if update.effective_chat.type == 'private':
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    target_id = get_target_user_id(update, context)
    
    if not target_id:
        await update.message.reply_text(
            "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n"
            "‚Ä¢ `/lastseen @username`\n"
            "‚Ä¢ `/lastseen ID`\n"
            "‚Ä¢ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: `/lastseen`",
            parse_mode='Markdown'
        )
        return
    
    user_info = get_user_by_id(target_id)
    
    if not user_info:
        await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    last_seen = user_info['last_activity']
    time_diff = datetime.now() - last_seen
    
    if time_diff.seconds < 60:
        time_str = "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
    elif time_diff.seconds < 3600:
        time_str = f"{time_diff.seconds // 60} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥"
    elif time_diff.days == 0:
        time_str = f"{time_diff.seconds // 3600} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥"
    else:
        time_str = f"{time_diff.days} –¥–Ω–µ–π –Ω–∞–∑–∞–¥"
    
    await update.message.reply_text(
        f"üë§ **–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å @{user_info['username']}:**\n\n"
        f"‚è∞ {last_seen.strftime('%d.%m.%Y %H:%M')}\n"
        f"üïê {time_str}",
        parse_mode='Markdown'
    )
