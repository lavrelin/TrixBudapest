# -*- coding: utf-8 -*-
from telegram import Update, ChatPermissions
from telegram.ext import ContextTypes
from config import Config
from datetime import datetime, timedelta
import logging

logger = logging.getLogger(__name__)

async def del_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ä–µ–ø–ª–∞–π)"""
    if not Config.is_moderator(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not update.message.reply_to_message:
        await update.message.reply_text("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å")
        return
    
    try:
        await update.message.reply_to_message.delete()
        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"Error deleting message: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")

async def purge_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if update.effective_chat.type == 'private':
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö")
        return
    
    if not update.message.reply_to_message:
        await update.message.reply_text("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ")
        return
    
    try:
        start_id = update.message.reply_to_message.message_id
        end_id = update.message.message_id
        chat_id = update.effective_chat.id
        
        deleted_count = 0
        for msg_id in range(start_id, end_id + 1):
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
                deleted_count += 1
            except:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å
        
        await update.message.reply_text(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
    except Exception as e:
        logger.error(f"Error in purge command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è")

async def slowmode_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–∫–ª—é—á–∏—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if update.effective_chat.type == 'private':
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö")
        return
    
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text(
            "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ slowmode:**\n\n"
            "‚Ä¢ `/slowmode 30` - 30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏\n"
            "‚Ä¢ `/slowmode 0` - –æ—Ç–∫–ª—é—á–∏—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º",
            parse_mode='Markdown'
        )
        return
    
    seconds = int(context.args[0])
    
    try:
        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: Telegram Bot API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É slowmode
        # –≠—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
        if seconds > 0:
            await update.message.reply_text(
                f"‚ö†Ô∏è **–ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º**\n\n"
                f"üêå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞\n"
                f"‚è∞ –ó–∞–ø—Ä–æ—à–µ–Ω–æ: {seconds} —Å–µ–∫—É–Ω–¥\n\n"
                f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ slowmode"
            )
        else:
            await update.message.reply_text("‚úÖ **–ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω**")
    except Exception as e:
        logger.error(f"Error setting slowmode: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —á–∞—Ç–∞")

async def noslowmode_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∫–ª—é—á–∏—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if update.effective_chat.type == 'private':
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö")
        return
    
    try:
        await update.message.reply_text("‚úÖ **–ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω**")
    except Exception as e:
        logger.error(f"Error disabling slowmode: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —á–∞—Ç–∞")

async def lockdown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —á–∞—Ç–∞ –Ω–∞ –≤—Ä–µ–º—è"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if update.effective_chat.type == 'private':
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö")
        return
    
    if not context.args:
        await update.message.reply_text(
            "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ lockdown:**\n\n"
            "‚Ä¢ `/lockdown 10m` - –Ω–∞ 10 –º–∏–Ω—É—Ç\n"
            "‚Ä¢ `/lockdown 1h` - –Ω–∞ 1 —á–∞—Å\n"
            "‚Ä¢ `/lockdown off` - –æ—Ç–∫–ª—é—á–∏—Ç—å",
            parse_mode='Markdown'
        )
        return
    
    if context.args[0].lower() == 'off':
        try:
            await update.message.reply_text("üîì **–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —á–∞—Ç–∞ —Å–Ω—è—Ç–∞**")
        except Exception as e:
            logger.error(f"Error in lockdown off: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
        return
    
    try:
        await update.message.reply_text(
            "üîí **–†–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏**\n\n"
            "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –ø–æ–ª–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —á–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ Bot API\n"
            "üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≥—Ä—É–ø–ø—ã"
        )
    except Exception as e:
        logger.error(f"Error in lockdown: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")

async def antiinvite_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∑–∞—â–∏—Ç—É –æ—Ç —Å—Å—ã–ª–æ–∫-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args:
        await update.message.reply_text("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/antiinvite on/off`")
        return
    
    action = context.args[0].lower()
    
    from handlers.message_handler import chat_settings
    
    if action == 'on':
        chat_settings['antiinvite'] = True
        await update.message.reply_text("üõ°Ô∏è **–ó–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –≤–∫–ª—é—á–µ–Ω–∞**")
    elif action == 'off':
        chat_settings['antiinvite'] = False
        await update.message.reply_text("‚úÖ **–ó–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∞**")
    else:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `on` –∏–ª–∏ `off`")

async def tagall_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø–æ–º—è–Ω—É—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if update.effective_chat.type == 'private':
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö")
        return
    
    message = ' '.join(context.args) if context.args else "–í–Ω–∏–º–∞–Ω–∏–µ –≤—Å–µ–º!"
    
    # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∫—ç—à–∞
    from handlers.moderation_commands import user_data
    
    active_users = [
        f"@{data['username']}" 
        for data in user_data.values() 
        if not data.get('banned') and data.get('username') and not data['username'].startswith('ID_')
    ][:50]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    if not active_users:
        await update.message.reply_text("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –∫—ç—à–µ")
        return
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    chunk_size = 20
    chunks = [active_users[i:i + chunk_size] for i in range(0, len(active_users), chunk_size)]
    
    await update.message.reply_text(f"üì¢ **{message}**")
    
    for chunk in chunks:
        await update.message.reply_text(" ".join(chunk))

async def admins_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
    if not Config.is_moderator(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    text = "üëë **–ê–î–ú–ò–ù–ò–°–¢–†–ê–¶–ò–Ø:**\n\n"
    
    text += "üî± **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:**\n"
    for admin_id in Config.ADMIN_IDS:
        from handlers.moderation_commands import user_data
        if admin_id in user_data:
            text += f"‚Ä¢ @{user_data[admin_id]['username']} (ID: {admin_id})\n"
        else:
            text += f"‚Ä¢ ID: {admin_id}\n"
    
    text += "\n‚öñÔ∏è **–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã:**\n"
    for mod_id in Config.MODERATOR_IDS:
        if mod_id not in Config.ADMIN_IDS:  # –ù–µ –¥—É–±–ª–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–æ–≤
            if mod_id in user_data:
                text += f"‚Ä¢ @{user_data[mod_id]['username']} (ID: {mod_id})\n"
            else:
                text += f"‚Ä¢ ID: {mod_id}\n"
    
    await update.message.reply_text(text, parse_mode='Markdown')
