from telegram import Update
from telegram.ext import ContextTypes
from config import Config
from data.user_data import update_user_activity
from services.admin_notifications import admin_notifications
import logging

logger = logging.getLogger(__name__)

async def id_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —á–∞—Ç–∞"""
    user = update.effective_user
    chat = update.effective_chat
    
    text = f"üÜî **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± ID:**\n\nüë§ –í–∞—à ID: `{user.id}`"
    
    if chat.type != 'private':
        text += f"\nüí¨ ID —á–∞—Ç–∞: `{chat.id}`\nüìù –¢–∏–ø —á–∞—Ç–∞: {chat.type}"
        if chat.title:
            text += f"\nüè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}"
    
    update_user_activity(user.id, user.username)
    await update.message.reply_text(text, parse_mode='Markdown')

async def whois_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã)"""
    if not Config.is_moderator(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args:
        await update.message.reply_text("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/whois @username` –∏–ª–∏ `/whois ID`", parse_mode='Markdown')
        return
    
    from data.user_data import get_user_by_username, get_user_by_id
    from datetime import datetime
    
    target = context.args[0]
    user_data = None
    
    if target.startswith('@'):
        username = target[1:]
        user_data = get_user_by_username(username)
    elif target.isdigit():
        user_id = int(target)
        user_data = get_user_by_id(user_id)
    
    if user_data:
        text = (
            f"üë§ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:**\n\n"
            f"üÜî ID: `{user_data['id']}`\n"
            f"üë§ Username: @{user_data['username']}\n"
            f"üìÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: {user_data['join_date'].strftime('%d.%m.%Y %H:%M')}\n"
            f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_data['last_activity'].strftime('%d.%m.%Y %H:%M')}\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {user_data['message_count']}\n"
            f"üö´ –°—Ç–∞—Ç—É—Å –±–∞–Ω–∞: {'–ó–∞–±–∞–Ω–µ–Ω' if user_data.get('banned') else '–ê–∫—Ç–∏–≤–µ–Ω'}\n"
            f"üîá –ú—É—Ç: {'–î–∞' if user_data.get('muted_until') and user_data['muted_until'] > datetime.now() else '–ù–µ—Ç'}"
        )
    else:
        text = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def join_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É"""
    from data.user_data import is_user_banned, lottery_participants
    from datetime import datetime
    
    user_id = update.effective_user.id
    username = update.effective_user.username or f"ID_{user_id}"
    
    update_user_activity(user_id, update.effective_user.username)
    
    if is_user_banned(user_id):
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å")
        return
    
    if user_id in lottery_participants:
        await update.message.reply_text("‚úÖ –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!")
        return
    
    lottery_participants[user_id] = {
        'username': username,
        'joined_at': datetime.now()
    }
    
    await update.message.reply_text(
        f"üéâ @{username}, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É!\n"
        f"üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(lottery_participants)}"
    )

async def participants_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã)"""
    if not Config.is_moderator(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    from data.user_data import lottery_participants
    
    if not lottery_participants:
        await update.message.reply_text("üìä –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞")
        return
    
    text = f"üìä **–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:** {len(lottery_participants)}\n\n"
    
    for i, (user_id, data) in enumerate(lottery_participants.items(), 1):
        text += f"{i}. @{data['username']} (ID: {user_id})\n"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def report_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º"""
    user_id = update.effective_user.id
    username = update.effective_user.username or f"ID_{user_id}"
    
    update_user_activity(user_id, update.effective_user.username)
    
    if not context.args:
        await update.message.reply_text(
            "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n"
            "`/report @username –ø—Ä–∏—á–∏–Ω–∞` –∏–ª–∏\n"
            "`/report –ø—Ä–∏—á–∏–Ω–∞ –∂–∞–ª–æ–±—ã`",
            parse_mode='Markdown'
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if context.args[0].startswith('@'):
        target = context.args[0]
        reason = ' '.join(context.args[1:]) if len(context.args) > 1 else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    else:
        target = "–û–±—â–∞—è –∂–∞–ª–æ–±–∞"
        reason = ' '.join(context.args)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫—É—é –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
    await admin_notifications.notify_report(
        reporter=username,
        reporter_id=user_id,
        target=target,
        reason=reason
    )
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(
        "‚úÖ –í–∞—à–∞ –∂–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º.\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –±–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!"
    )
    
    logger.info(f"Report from {username} (ID: {user_id}) about {target}: {reason}")
