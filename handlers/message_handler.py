# -*- coding: utf-8 -*-
from telegram import Update
from telegram.ext import ContextTypes
from config import Config
import logging

logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞
chat_settings = {
    'slowmode': 0,
    'antiinvite': False,
    'lockdown': False,
    'flood_limit': 0
}

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–∂–∏–¥–∞—é—â–∏–µ –≤–≤–æ–¥–∞
waiting_users = {}

async def handle_text_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
    if user_id in waiting_users:
        await handle_waiting_user_input(update, context, text)
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Å—ã–ª–∫–∏-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –∑–∞—â–∏—Ç–∞)
    if chat_settings.get('antiinvite') and ('t.me/' in text or 'telegram.me/' in text):
        if not Config.is_admin(user_id):
            try:
                await update.message.delete()
                await update.message.reply_text("‚ùå –°—Å—ã–ª–∫–∏ –Ω–∞ –¥—Ä—É–≥–∏–µ —á–∞—Ç—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã", disable_notification=True)
            except:
                pass
            return

async def handle_waiting_user_input(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    action_data = waiting_users[user_id]
    
    try:
        if action_data['action'] == 'add_link':
            await handle_add_link_url(update, context, text, action_data)
        elif action_data['action'] == 'edit_link':
            await handle_edit_link_data(update, context, text, action_data)
        elif action_data['action'] == 'view_page_edit':
            await handle_view_page_edit(update, context, text, action_data)
        elif action_data['action'] == 'add_media_to_page':
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await update.message.reply_text(
                f"‚úÖ **–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!**\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.",
                parse_mode='Markdown'
            )
    except Exception as e:
        logger.error(f"Error handling waiting user input: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞")
    finally:
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö
        waiting_users.pop(user_id, None)

async def handle_add_link_url(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                             text: str, action_data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è URL –¥–ª—è –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏"""
    from utils.validators import is_valid_url
    from data.links_data import add_link
    
    if not is_valid_url(text.strip()):
        await update.message.reply_text(
            "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏**\n\n"
            "üîó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–Ω—ã–π URL —Å http:// –∏–ª–∏ https://\n"
            "üìù –ü—Ä–∏–º–µ—Ä: https://t.me/snghu",
            parse_mode='Markdown'
        )
        return
    
    new_link = add_link(
        name=action_data['name'],
        url=text.strip(),
        description=action_data['description']
    )
    
    await update.message.reply_text(
        f"‚úÖ **–°—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!**\n\n"
        f"üÜî ID: {new_link['id']}\n"
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {new_link['name']}\n"
        f"üîó URL: {new_link['url']}\n"
        f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {new_link['description']}\n\n"
        f"‚ú® –ü—Ä–æ–≤–µ—Ä–∏—Ç—å: `/trixlinks`",
        parse_mode='Markdown'
    )

async def handle_edit_link_data(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                               text: str, action_data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–∫–∏"""
    from utils.validators import is_valid_url
    from data.links_data import edit_link
    
    parts = text.split(' | ')
    if len(parts) != 3:
        await update.message.reply_text(
            "‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç**\n\n"
            "üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `–Ω–∞–∑–≤–∞–Ω–∏–µ | –æ–ø–∏—Å–∞–Ω–∏–µ | —Å—Å—ã–ª–∫–∞`\n"
            "üìã –ü—Ä–∏–º–µ—Ä: `–ö–∞–Ω–∞–ª | –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª | https://t.me/snghu`",
            parse_mode='Markdown'
        )
        return
    
    name, description, url = [part.strip() for part in parts]
    
    if not is_valid_url(url):
        await update.message.reply_text(
            "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏**\n\n"
            "üîó URL –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å http:// –∏–ª–∏ https://",
            parse_mode='Markdown'
        )
        return
    
    link_id = action_data['link_id']
    updated_link = edit_link(link_id, name, url, description)
    
    if updated_link:
        await update.message.reply_text(
            f"‚úÖ **–°—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!**\n\n"
            f"üÜî ID: {link_id}\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {updated_link['name']}\n"
            f"üîó URL: {updated_link['url']}\n"
            f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {updated_link['description']}\n\n"
            f"‚ú® –ü—Ä–æ–≤–µ—Ä–∏—Ç—å: `/trixlinks`",
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏")

async def handle_view_page_edit(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                               text: str, action_data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    from handlers.games_handler import view_pages
    
    game_version = action_data['game_version']
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    view_pages[game_version]['text'] = text.strip()
    
    await update.message.reply_text(
        f"‚úÖ **–°—Ç—Ä–∞–Ω–∏—Ü–∞ {game_version.upper()} –æ–±–Ω–æ–≤–ª–µ–Ω–∞!**\n\n"
        f"üìù –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç: {text.strip()}\n\n"
        f"‚ú® –ü—Ä–æ–≤–µ—Ä–∏—Ç—å: `/{game_version}page`",
        parse_mode='Markdown'
    )

async def handle_media_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–¥–∏–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if user_id in waiting_users:
        action_data = waiting_users[user_id]
        
        if action_data['action'] in ['add_media_to_page', 'edit_page_media']:
            await handle_page_media(update, context, user_id, action_data)
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞
            pass

async def handle_page_media(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int, action_data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü"""
    from handlers.games_handler import view_pages
    
    game_version = action_data['game_version']
    
    # –ü–æ–ª—É—á–∞–µ–º URL –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞
    media_url = None
    if update.message.photo:
        media_url = update.message.photo[-1].file_id
    elif update.message.video:
        media_url = update.message.video.file_id
    
    if media_url:
        view_pages[game_version]['media_url'] = media_url
        
        await update.message.reply_text(
            f"‚úÖ **–ú–µ–¥–∏–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {game_version.upper()}!**\n\n"
            f"üì∏ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ\n\n"
            f"‚ú® **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:** `/{game_version}page`\n"
            f"üîÑ **–ò–∑–º–µ–Ω–∏—Ç—å:** `/{game_version}editpage –Ω–æ–≤—ã–π_—Ç–µ–∫—Å—Ç`",
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            f"‚ùå **–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞**\n\n"
            f"üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ\n"
            f"üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª"
        )
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö
    waiting_users.pop(user_id, None)
