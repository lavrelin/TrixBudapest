# -*- coding: utf-8 -*-
from telegram import Update
from telegram.ext import ContextTypes
from config import Config
from data.links_data import trix_links, add_link, edit_link, delete_link, get_link_by_id
from handlers.message_handler import waiting_users
import logging

logger = logging.getLogger(__name__)

async def trixlinks_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏"""
    if not trix_links:
        await update.message.reply_text("üìÇ **–°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –ø—É—Å—Ç**")
        return
    
    text = "üîó **–ü–û–õ–ï–ó–ù–´–ï –°–°–´–õ–ö–ò TRIX:**\n\n"
    
    for i, link in enumerate(trix_links, 1):
        text += f"{i}. **{link['name']}**\n"
        text += f"üîó {link['url']}\n"
        text += f"üìù {link['description']}\n\n"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def trixlinksadd_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É (–∞–¥–º–∏–Ω)"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –ª–∏—á–∫–µ
    if update.effective_chat.type != 'private':
        await update.message.reply_text(
            "üì± –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.\n\n"
            "üëâ –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –ª–∏—á–∫—É: @TrixLiveBot",
            parse_mode='Markdown'
        )
        return
    
    if len(context.args) < 2:
        await update.message.reply_text(
            "üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏**\n\n"
            "**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/trixlinksadd \"–Ω–∞–∑–≤–∞–Ω–∏–µ\" \"–æ–ø–∏—Å–∞–Ω–∏–µ\"`\n"
            "**–ü—Ä–∏–º–µ—Ä:** `/trixlinksadd \"–ö–∞–Ω–∞–ª –ë—É–¥–∞–ø–µ—à—Ç–∞\" \"–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª —Å–æ–æ–±—â–µ—Å—Ç–≤–∞\"`\n\n"
            "üìã **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n"
            "1Ô∏è‚É£ –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º\n"
            "2Ô∏è‚É£ –í —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É\n\n"
            "üí° **–°–æ–≤–µ—Ç—ã:**\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–≤—ã—á–∫–∏ –¥–ª—è –º–Ω–æ–≥–æ—Å–ª–æ–≤–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π\n"
            "‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º\n"
            "‚Ä¢ –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å http:// –∏–ª–∏ https://",
            parse_mode='Markdown'
        )
        return
    
    name = context.args[0].strip('"')
    description = ' '.join(context.args[1:]).strip('"')
    
    waiting_users[update.effective_user.id] = {
        'action': 'add_link',
        'name': name,
        'description': description
    }
    
    await update.message.reply_text(
        f"‚úÖ **–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:**\n\n"
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
        f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
        f"üîó **–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.**\n"
        f"üìå –ü—Ä–∏–º–µ—Ä: https://t.me/snghu",
        parse_mode='Markdown'
    )

async def trixlinksedit_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É (–∞–¥–º–∏–Ω)"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –ª–∏—á–∫–µ
    if update.effective_chat.type != 'private':
        await update.message.reply_text(
            "üì± –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.\n\n"
            "üëâ –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –ª–∏—á–∫—É: @TrixLiveBot",
            parse_mode='Markdown'
        )
        return
    
    if not context.args or not context.args[0].isdigit():
        text = "üìù **–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –°–°–´–õ–û–ö**\n\n**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/trixlinksedit ID`\n\n**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Å—ã–ª–∫–∏:**\n"
        for link in trix_links:
            text += f"{link['id']}. {link['name']}\n"
        
        if not trix_links:
            text += "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Å—ã–ª–æ–∫\n"
        
        text += "\nüí° **–ü—Ä–∏–º–µ—Ä:** `/trixlinksedit 1`"
        
        await update.message.reply_text(text, parse_mode='Markdown')
        return
    
    link_id = int(context.args[0])
    link_to_edit = get_link_by_id(link_id)
    
    if not link_to_edit:
        await update.message.reply_text(f"‚ùå –°—Å—ã–ª–∫–∞ —Å ID {link_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    waiting_users[update.effective_user.id] = {
        'action': 'edit_link',
        'link_id': link_id
    }
    
    await update.message.reply_text(
        f"üìù **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ ID {link_id}:**\n\n"
        f"**–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:**\n"
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {link_to_edit['name']}\n"
        f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {link_to_edit['description']}\n"
        f"üîó –°—Å—ã–ª–∫–∞: {link_to_edit['url']}\n\n"
        f"**–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:**\n"
        f"`–Ω–∞–∑–≤–∞–Ω–∏–µ | –æ–ø–∏—Å–∞–Ω–∏–µ | —Å—Å—ã–ª–∫–∞`\n\n"
        f"üìå **–ü—Ä–∏–º–µ—Ä:**\n"
        f"`–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ | –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ | https://t.me/example`",
        parse_mode='Markdown'
    )

async def trixlinksdelete_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É (–∞–¥–º–∏–Ω)"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –ª–∏—á–∫–µ
    if update.effective_chat.type != 'private':
        await update.message.reply_text(
            "üì± –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.\n\n"
            "üëâ –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –ª–∏—á–∫—É: @TrixLiveBot",
            parse_mode='Markdown'
        )
        return
    
    if not context.args or not context.args[0].isdigit():
        text = "üóëÔ∏è **–£–î–ê–õ–ï–ù–ò–ï –°–°–´–õ–û–ö**\n\n**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/trixlinksdelete ID`\n\n**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Å—ã–ª–∫–∏:**\n"
        for link in trix_links:
            text += f"{link['id']}. {link['name']}\n"
        
        if not trix_links:
            text += "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Å—ã–ª–æ–∫\n"
        
        text += "\n‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!"
        
        await update.message.reply_text(text, parse_mode='Markdown')
        return
    
    link_id = int(context.args[0])
    deleted_link = delete_link(link_id)
    
    if deleted_link:
        await update.message.reply_text(
            f"‚úÖ **–°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞:**\n\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {deleted_link['name']}\n"
            f"üîó URL: {deleted_link['url']}\n"
            f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {deleted_link['description']}\n\n"
            f"üóëÔ∏è –°—Å—ã–ª–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ",
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(f"‚ùå –°—Å—ã–ª–∫–∞ —Å ID {link_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
