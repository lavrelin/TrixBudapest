from telegram import Update
from telegram.ext import ContextTypes
from config import Config
from data.links_data import trix_links, add_link, edit_link, delete_link, get_link_by_id
from data.user_data import waiting_users
import logging
import re

logger = logging.getLogger(__name__)

async def trixlinks_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏"""
    if not trix_links:
        await update.message.reply_text("üìÇ –°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –ø—É—Å—Ç")
        return
    
    text = "üîó **–ü–û–õ–ï–ó–ù–´–ï –°–°–´–õ–ö–ò TRIX:**\n\n"
    
    for i, link in enumerate(trix_links, 1):
        text += f"{i}. **{link['name']}**\n"
        text += f"üîó {link['url']}\n"
        text += f"üìù {link['description']}\n\n"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def trixlinksadd_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É (–∞–¥–º–∏–Ω)"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if len(context.args) < 2:
        await update.message.reply_text(
            "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n"
            "`/trixlinksadd \"–Ω–∞–∑–≤–∞–Ω–∏–µ\" \"–æ–ø–∏—Å–∞–Ω–∏–µ\"`\n\n"
            "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
            parse_mode='Markdown'
        )
        return
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Å —É—á–µ—Ç–æ–º –∫–∞–≤—ã—á–µ–∫
    text = ' '.join(context.args)
    parts = re.findall(r'"([^"]*)"', text)
    
    if len(parts) < 2:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ –∫–∞–≤—ã—á–µ–∫
        if len(context.args) >= 2:
            name = context.args[0]
            description = ' '.join(context.args[1:])
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "`/trixlinksadd \"–Ω–∞–∑–≤–∞–Ω–∏–µ\" \"–æ–ø–∏—Å–∞–Ω–∏–µ\"`",
                parse_mode='Markdown'
            )
            return
    else:
        name = parts[0]
        description = parts[1] if len(parts) > 1 else ''
    
    waiting_users[update.effective_user.id] = {
        'action': 'add_link',
        'name': name,
        'description': description
    }
    
    await update.message.reply_text(
        f"‚úÖ **–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:**\n\n"
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
        f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
        f"üîó **–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.**",
        parse_mode='Markdown'
    )

async def handle_link_url(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ URL –¥–ª—è –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏"""
    user_id = update.effective_user.id
    
    if user_id not in waiting_users:
        return
    
    action_data = waiting_users[user_id]
    url = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL
    if not (url.startswith('http://') or url.startswith('https://')):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
    new_link = add_link(
        name=action_data['name'],
        url=url,
        description=action_data['description']
    )
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    waiting_users.pop(user_id, None)
    
    await update.message.reply_text(
        f"‚úÖ **–°—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!**\n\n"
        f"üÜî ID: {new_link['id']}\n"
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {new_link['name']}\n"
        f"üîó URL: {new_link['url']}\n"
        f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {new_link['description']}",
        parse_mode='Markdown'
    )

async def trixlinksedit_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É (–∞–¥–º–∏–Ω)"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args or not context.args[0].isdigit():
        text = "üìù **–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –°–°–´–õ–û–ö**\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/trixlinksedit ID`\n\n**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Å—ã–ª–∫–∏:**\n"
        for link in trix_links:
            text += f"{link['id']}. {link['name']}\n"
        await update.message.reply_text(text, parse_mode='Markdown')
        return
    
    link_id = int(context.args[0])
    link_to_edit = get_link_by_id(link_id)
    
    if not link_to_edit:
        await update.message.reply_text(f"‚ùå –°—Å—ã–ª–∫–∞ —Å ID {link_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    waiting_users[update.effective_user.id] = {
        'action': 'edit_link',
        'link_id': link_id
    }
    
    await update.message.reply_text(
        f"üìù **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ ID {link_id}:**\n\n"
        f"–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n"
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {link_to_edit['name']}\n"
        f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {link_to_edit['description']}\n"
        f"üîó –°—Å—ã–ª–∫–∞: {link_to_edit['url']}\n\n"
        f"**–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:**\n"
        f"`–Ω–∞–∑–≤–∞–Ω–∏–µ | –æ–ø–∏—Å–∞–Ω–∏–µ | —Å—Å—ã–ª–∫–∞`\n\n"
        f"**–ü—Ä–∏–º–µ—Ä:**\n"
        f"`–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ | –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ | https://t.me/new`",
        parse_mode='Markdown'
    )

async def handle_link_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏"""
    user_id = update.effective_user.id
    
    if user_id not in waiting_users:
        return
    
    action_data = waiting_users[user_id]
    text = update.message.text.strip()
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –Ω–∞–∑–≤–∞–Ω–∏–µ | –æ–ø–∏—Å–∞–Ω–∏–µ | —Å—Å—ã–ª–∫–∞
    parts = [part.strip() for part in text.split('|')]
    
    if len(parts) != 3:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "`–Ω–∞–∑–≤–∞–Ω–∏–µ | –æ–ø–∏—Å–∞–Ω–∏–µ | —Å—Å—ã–ª–∫–∞`\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode='Markdown'
        )
        return
    
    new_name, new_description, new_url = parts
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL
    if not (new_url.startswith('http://') or new_url.startswith('https://')):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    link_id = action_data['link_id']
    updated_link = edit_link(link_id, new_name, new_url, new_description)
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    waiting_users.pop(user_id, None)
    
    if updated_link:
        await update.message.reply_text(
            f"‚úÖ **–°—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!**\n\n"
            f"üÜî ID: {link_id}\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {updated_link['name']}\n"
            f"üîó URL: {updated_link['url']}\n"
            f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {updated_link['description']}",
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏")

async def trixlinksdelete_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É (–∞–¥–º–∏–Ω)"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args or not context.args[0].isdigit():
        text = "üóëÔ∏è **–£–î–ê–õ–ï–ù–ò–ï –°–°–´–õ–û–ö**\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/trixlinksdelete ID`\n\n**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Å—ã–ª–∫–∏:**\n"
        for link in trix_links:
            text += f"{link['id']}. {link['name']}\n"
        await update.message.reply_text(text, parse_mode='Markdown')
        return
    
    link_id = int(context.args[0])
    deleted_link = delete_link(link_id)
    
    if deleted_link:
        await update.message.reply_text(
            f"‚úÖ **–°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞:**\n\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {deleted_link['name']}\n"
            f"üîó URL: {deleted_link['url']}",
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(f"‚ùå –°—Å—ã–ª–∫–∞ —Å ID {link_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
