from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import Config
import logging

logger = logging.getLogger(__name__)

async def handle_moderation_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle moderation callbacks with improved error handling"""
    query = update.callback_query
    
    user_id = update.effective_user.id
    
    logger.info(f"Moderation callback from user {user_id}: {query.data}")
    
    if not Config.is_moderator(user_id):
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        logger.warning(f"Access denied for user {user_id}")
        return
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —Å—Ä–∞–∑—É —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    await query.answer()
    
    data = query.data.split(":")
    action = data[1] if len(data) > 1 else None
    post_id = int(data[2]) if len(data) > 2 and data[2].isdigit() else None
    
    logger.info(f"Moderation: action={action}, post_id={post_id}, moderator={user_id}")
    
    if not post_id:
        logger.error(f"Missing post_id in callback: {query.data}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: ID –ø–æ—Å—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
        return
    
    if action == "approve":
        await start_approve_process(update, context, post_id, chat=False)
    elif action == "approve_chat":
        await start_approve_process(update, context, post_id, chat=True)
    elif action == "reject":
        await start_reject_process(update, context, post_id)
    else:
        logger.error(f"Unknown moderation action: {action}")
        await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")

async def handle_moderation_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle text input from moderators"""
    user_id = update.effective_user.id
    
    logger.info(f"Moderation text from user {user_id}")
    
    if not Config.is_moderator(user_id):
        logger.warning(f"Non-moderator {user_id} tried to send moderation text")
        return
    
    waiting_for = context.user_data.get('mod_waiting_for')
    logger.info(f"Moderator {user_id} waiting_for: {waiting_for}")
    
    if waiting_for == 'approve_link':
        await process_approve_with_link(update, context)
    elif waiting_for == 'reject_reason':
        await process_reject_with_reason(update, context)
    else:
        logger.info(f"Moderator {user_id} sent text but not in moderation process")

async def start_approve_process(update: Update, context: ContextTypes.DEFAULT_TYPE, post_id: int, chat: bool = False):
    """Start approval process - –ù–ï –£–î–ê–õ–Ø–ï–¢ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        logger.info(f"Starting approve process for post {post_id}, chat={chat}")
        
        from services.db import db
        if not db.session_maker:
            logger.error("Database not available")
            await update.callback_query.answer("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
            return
        
        try:
            from models import Post
            from sqlalchemy import select
            
            async with db.get_session() as session:
                result = await session.execute(
                    select(Post).where(Post.id == post_id)
                )
                post = result.scalar_one_or_none()
                
                if not post:
                    logger.error(f"‚ùå Post {post_id} not found in database")
                    await update.callback_query.answer(
                        "‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
                        show_alert=True
                    )
                    return
                
                logger.info(f"‚úÖ Found post {post_id}, user {post.user_id}, status {post.status}")
                
        except Exception as db_error:
            logger.error(f"Database error when getting post {post_id}: {db_error}", exc_info=True)
            await update.callback_query.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {str(db_error)[:100]}",
                show_alert=True
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
        context.user_data['mod_post_id'] = post_id
        context.user_data['mod_post_user_id'] = post.user_id
        context.user_data['mod_waiting_for'] = 'approve_link'
        context.user_data['mod_is_chat'] = chat
        
        logger.info(f"‚úÖ Stored context for approval: post={post_id}, user={post.user_id}")
        
        destination = "—á–∞—Ç–µ (–±—É–¥–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ)" if chat else "–∫–∞–Ω–∞–ª–µ"
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ –ù–ï —É–¥–∞–ª—è–µ–º –µ–≥–æ
        try:
            await update.callback_query.edit_message_reply_markup(reply_markup=None)
            logger.info("Removed buttons from moderation message (kept message)")
        except Exception as e:
            logger.warning(f"Could not remove buttons: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        try:
            original_text = update.callback_query.message.text
            updated_text = f"{original_text}\n\n‚è≥ –í –û–ë–†–ê–ë–û–¢–ö–ï –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º @{update.effective_user.username or 'Unknown'}"
            
            await update.callback_query.edit_message_text(
                text=updated_text
            )
            logger.info("Updated moderation message with processing status")
        except Exception as e:
            logger.warning(f"Could not update message text: {e}")
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        instruction_text = (
            f"‚úÖ –û–î–û–ë–†–ï–ù–ò–ï –ó–ê–Ø–í–ö–ò\n\n"
            f"üìä Post ID: {post_id}\n"
            f"üë§ User ID: {post.user_id}\n"
            f"üìç –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤: {destination}\n\n"
            f"üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç:\n"
            f"(–ù–∞–ø—Ä–∏–º–µ—Ä: https://t.me/snghu/1234)\n\n"
            f"‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ–ø—É–±–ª–∏–∫—É–π—Ç–µ –ø–æ—Å—Ç –≤—Ä—É—á–Ω—É—é –≤ –∫–∞–Ω–∞–ª–µ/—á–∞—Ç–µ,\n"
            f"–∑–∞—Ç–µ–º —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ\n\n"
            f"üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –º–Ω–µ –≤ –õ–°"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É –≤ –õ–°
        try:
            await context.bot.send_message(
                chat_id=update.effective_user.id,
                text=instruction_text
            )
            logger.info(f"‚úÖ Sent approval instruction to moderator {update.effective_user.id} in PM")
        except Exception as send_error:
            logger.error(f"‚ùå Could not send to moderator PM: {send_error}")
            # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            try:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=f"‚ö†Ô∏è @{update.effective_user.username or '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä'}, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –õ–° /start, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏!\n\n{instruction_text}",
                    reply_to_message_id=update.callback_query.message.message_id
                )
                logger.info("Sent approval instruction to moderation group as fallback")
            except Exception as group_error:
                logger.error(f"Could not send to group either: {group_error}")
                await update.callback_query.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É /start –≤ –õ–°",
                    show_alert=True
                )
        
    except Exception as e:
        logger.error(f"Error starting approve process: {e}", exc_info=True)
        try:
            await update.callback_query.answer(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}",
                show_alert=True
            )
        except:
            pass

async def start_reject_process(update: Update, context: ContextTypes.DEFAULT_TYPE, post_id: int):
    """Start rejection process - –ù–ï –£–î–ê–õ–Ø–ï–¢ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        logger.info(f"Starting reject process for post {post_id}")
        
        from services.db import db
        if not db.session_maker:
            logger.error("Database not available")
            await update.callback_query.answer("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
            return
        
        try:
            from models import Post
            from sqlalchemy import select
            
            async with db.get_session() as session:
                result = await session.execute(
                    select(Post).where(Post.id == post_id)
                )
                post = result.scalar_one_or_none()
                
                if not post:
                    logger.error(f"‚ùå Post {post_id} not found")
                    await update.callback_query.answer(
                        "‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                        show_alert=True
                    )
                    return
                
                logger.info(f"‚úÖ Found post {post_id} for rejection")
                
        except Exception as db_error:
            logger.error(f"Database error: {db_error}", exc_info=True)
            await update.callback_query.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ë–î",
                show_alert=True
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data['mod_post_id'] = post_id
        context.user_data['mod_post_user_id'] = post.user_id
        context.user_data['mod_waiting_for'] = 'reject_reason'
        
        logger.info(f"‚úÖ Stored context for rejection: post={post_id}")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏, –Ω–æ –ù–ï —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await update.callback_query.edit_message_reply_markup(reply_markup=None)
            logger.info("Removed buttons from moderation message (kept message)")
        except Exception as e:
            logger.warning(f"Could not remove buttons: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
        try:
            original_text = update.callback_query.message.text
            updated_text = f"{original_text}\n\n‚è≥ –û–¢–ö–õ–û–ù–Ø–ï–¢–°–Ø –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º @{update.effective_user.username or 'Unknown'}"
            
            await update.callback_query.edit_message_text(
                text=updated_text
            )
            logger.info("Updated moderation message with rejection status")
        except Exception as e:
            logger.warning(f"Could not update message text: {e}")
        
        instruction_text = (
            f"‚ùå –û–¢–ö–õ–û–ù–ï–ù–ò–ï –ó–ê–Ø–í–ö–ò\n\n"
            f"üìä Post ID: {post_id}\n"
            f"üë§ User ID: {post.user_id}\n\n"
            f"üìù –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:\n"
            f"(–ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)\n\n"
            f"‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –º–Ω–µ –≤ –õ–°"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ –õ–° –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
        try:
            await context.bot.send_message(
                chat_id=update.effective_user.id,
                text=instruction_text
            )
            logger.info(f"‚úÖ Sent rejection instruction to moderator {update.effective_user.id} in PM")
        except Exception as send_error:
            logger.error(f"‚ùå Could not send to moderator PM: {send_error}")
            # Fallback –≤ –≥—Ä—É–ø–ø—É
            try:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=f"‚ö†Ô∏è @{update.effective_user.username or '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä'}, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –õ–° /start!\n\n{instruction_text}",
                    reply_to_message_id=update.callback_query.message.message_id
                )
                logger.info("Sent rejection instruction to moderation group as fallback")
            except Exception as group_error:
                logger.error(f"Could not send to group either: {group_error}")
                await update.callback_query.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É /start –≤ –õ–°",
                    show_alert=True
                )
        
    except Exception as e:
        logger.error(f"Error starting reject process: {e}", exc_info=True)
        try:
            await update.callback_query.answer(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}",
                show_alert=True
            )
        except:
            pass

async def process_approve_with_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Process approval with publication link"""
    try:
        link = update.message.text.strip()
        post_id = context.user_data.get('mod_post_id')
        user_id = context.user_data.get('mod_post_user_id')
        is_chat = context.user_data.get('mod_is_chat', False)
        
        logger.info(f"Processing approval: post={post_id}, user={user_id}, link={link}")
        
        if not post_id or not user_id:
            logger.error("Missing post_id or user_id in context")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏
        if not link.startswith('https://t.me/'):
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏\n\n"
                "–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://t.me/"
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞
        try:
            from services.db import db
            from models import Post, PostStatus
            from sqlalchemy import select
            
            async with db.get_session() as session:
                result = await session.execute(
                    select(Post).where(Post.id == post_id)
                )
                post = result.scalar_one_or_none()
                
                if not post:
                    logger.error(f"Post {post_id} not found for approval")
                    await update.message.reply_text(f"‚ùå –ü–æ—Å—Ç {post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                post.status = PostStatus.APPROVED
                await session.commit()
                logger.info(f"‚úÖ Post {post_id} status updated to APPROVED")
                
        except Exception as db_error:
            logger.error(f"Database error updating post: {db_error}", exc_info=True)
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {str(db_error)[:100]}")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            destination_text = "—á–∞—Ç–µ" if is_chat else "–∫–∞–Ω–∞–ª–µ"
            success_keyboard = [
                [InlineKeyboardButton("üì∫ –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É", url=link)],
                [InlineKeyboardButton("üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", url="https://t.me/snghu")],
                [InlineKeyboardButton("üìö –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥", url="https://t.me/trixvault")]
            ]
            
            await context.bot.send_message(
                chat_id=user_id,
                text=f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!\n\n"
                     f"üìù –í–∞—à –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ {destination_text}.\n\n"
                     f"üîó –°—Å—ã–ª–∫–∞:\n{link}\n\n"
                     f"üîî –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:",
                reply_markup=InlineKeyboardMarkup(success_keyboard)
            )
            
            await update.message.reply_text(
                f"‚úÖ –ó–ê–Ø–í–ö–ê –û–î–û–ë–†–ï–ù–ê\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω\n"
                f"üîó –°—Å—ã–ª–∫–∞: {link}\n"
                f"üìä Post ID: {post_id}"
            )
            
            logger.info(f"‚úÖ Successfully approved post {post_id}")
            
        except Exception as notify_error:
            logger.error(f"Error notifying user: {notify_error}", exc_info=True)
            await update.message.reply_text(
                f"‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                f"User ID: {user_id}\nPost ID: {post_id}"
            )
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data.pop('mod_post_id', None)
        context.user_data.pop('mod_post_user_id', None)
        context.user_data.pop('mod_waiting_for', None)
        context.user_data.pop('mod_is_chat', None)
        
    except Exception as e:
        logger.error(f"Error processing approval: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:200]}")

async def process_reject_with_reason(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Process rejection with reason"""
    try:
        reason = update.message.text.strip()
        post_id = context.user_data.get('mod_post_id')
        user_id = context.user_data.get('mod_post_user_id')
        
        logger.info(f"Processing rejection: post={post_id}, user={user_id}")
        
        if not post_id or not user_id:
            logger.error("Missing data in context")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        if not reason or len(reason) < 5:
            await update.message.reply_text("‚ùå –ü—Ä–∏—á–∏–Ω–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤)")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        try:
            from services.db import db
            from models import Post, PostStatus
            from sqlalchemy import select
            
            async with db.get_session() as session:
                result = await session.execute(
                    select(Post).where(Post.id == post_id)
                )
                post = result.scalar_one_or_none()
                
                if not post:
                    logger.error(f"Post {post_id} not found")
                    await update.message.reply_text(f"‚ùå –ü–æ—Å—Ç {post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                post.status = PostStatus.REJECTED
                await session.commit()
                logger.info(f"‚úÖ Post {post_id} status updated to REJECTED")
                
        except Exception as db_error:
            logger.error(f"Database error: {db_error}", exc_info=True)
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {str(db_error)[:100]}")
            return
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ë–ï–ó Markdown
        try:
            user_message = (
                f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞:\n{reason}\n\n"
                f"üí° –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É, —É—á—Ç—è —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è.\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
            )
            
            await context.bot.send_message(
                chat_id=user_id,
                text=user_message
            )
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
            mod_confirmation = (
                f"‚ùå –ó–ê–Ø–í–ö–ê –û–¢–ö–õ–û–ù–ï–ù–ê\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason[:100]}\n"
                f"üìä Post ID: {post_id}"
            )
            
            await update.message.reply_text(mod_confirmation)
            
            logger.info(f"‚úÖ Successfully rejected post {post_id} and notified user {user_id}")
            
        except Exception as notify_error:
            logger.error(f"Error notifying user: {notify_error}", exc_info=True)
            await update.message.reply_text(
                f"‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                f"User ID: {user_id}\nPost ID: {post_id}"
            )
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data.pop('mod_post_id', None)
        context.user_data.pop('mod_post_user_id', None)
        context.user_data.pop('mod_waiting_for', None)
        
    except Exception as e:
        logger.error(f"Error processing rejection: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:200]}")

# Legacy functions –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
async def approve_post(update: Update, context: ContextTypes.DEFAULT_TYPE, post_id: int):
    """Legacy function"""
    await start_approve_process(update, context, post_id)

async def approve_post_to_chat(update: Update, context: ContextTypes.DEFAULT_TYPE, post_id: int):
    """Legacy function"""
    await start_approve_process(update, context, post_id, chat=True)

async def reject_post(update: Update, context: ContextTypes.DEFAULT_TYPE, post_id: int):
    """Legacy function"""
    await start_reject_process(update, context, post_id)

async def publish_to_channel(bot, post):
    """DEPRECATED - manual publication now used"""
    logger.warning("publish_to_channel called but manual publication is now used")

async def publish_to_chat(bot, post):
    """DEPRECATED - manual publication now used"""
    logger.warning("publish_to_chat called but manual publication is now used")
