#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import logging
import os
import sys
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def init_database():
    """Initialize database tables - with safety checks"""
    try:
        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º DATABASE_URL
        db_url = os.getenv("DATABASE_URL", "sqlite:///./trixbot.db")
        
        if not db_url:
            logger.error("‚ùå DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
            return False
        
        logger.info(f"üìä DATABASE_URL: {db_url[:50]}...")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        from sqlalchemy.ext.asyncio import create_async_engine
        from sqlalchemy import text
        from models import Base, User, Post
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º URL –¥–ª—è async
        async_url = db_url
        
        if async_url.startswith('sqlite:///'):
            async_url = async_url.replace('sqlite:///', 'sqlite+aiosqlite:///')
            logger.info("üî∑ –†–µ–∂–∏–º: SQLite + aiosqlite")
        elif async_url.startswith('postgresql://'):
            async_url = async_url.replace('postgresql://', 'postgresql+asyncpg://', 1)
            logger.info("üî∑ –†–µ–∂–∏–º: PostgreSQL + asyncpg")
        elif async_url.startswith('postgres://'):
            async_url = async_url.replace('postgres://', 'postgresql+asyncpg://', 1)
            logger.info("üî∑ –†–µ–∂–∏–º: PostgreSQL (old format) + asyncpg")
        
        logger.info(f"üìù Async URL: {async_url[:50]}...")
        
        # –°–æ–∑–¥–∞–µ–º engine
        engine = create_async_engine(
            async_url,
            echo=True,
            pool_pre_ping=True,
            pool_recycle=3600
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        logger.info("üîó –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")
        try:
            async with engine.begin() as conn:
                await conn.execute(text("SELECT 1"))
            logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ OK")
        except Exception as conn_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {conn_error}")
            await engine.dispose()
            return False
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        logger.info("üìã –°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—ã...")
        try:
            async with engine.begin() as conn:
                await conn.run_sync(Base.metadata.create_all)
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
        except Exception as table_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {table_error}")
            await engine.dispose()
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        logger.info("‚úîÔ∏è –ü—Ä–æ–≤–µ—Ä—è—é —Ç–∞–±–ª–∏—Ü—ã...")
        try:
            async with engine.connect() as conn:
                if 'postgres' in async_url.lower():
                    result = await conn.execute(
                        text("SELECT tablename FROM pg_tables WHERE schemaname='public' ORDER BY tablename")
                    )
                else:
                    result = await conn.execute(
                        text("SELECT name FROM sqlite_master WHERE type='table' ORDER BY name")
                    )
                
                tables = [row[0] for row in result]
                logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü—ã: {tables}")
                
                if 'users' not in tables or 'posts' not in tables:
                    logger.warning("‚ö†Ô∏è –ù–µ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–π–¥–µ–Ω—ã!")
        except Exception as verify_error:
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü: {verify_error}")
        
        await engine.dispose()
        logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n")
        return True
        
    except ImportError as import_error:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {import_error}")
        return False
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        return False

if __name__ == "__main__":
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î...\n")
        success = asyncio.run(init_database())
        
        if success:
            logger.info("\n‚úÖ ‚úÖ ‚úÖ SUCCESS: Database initialized")
            sys.exit(0)
        else:
            logger.error("\n‚ùå ‚ùå ‚ùå FAILED: Database initialization failed")
            sys.exit(1)
    except KeyboardInterrupt:
        logger.info("\n‚ö†Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞")
        sys.exit(130)
    except Exception as e:
        logger.error(f"\n‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        sys.exit(1)
